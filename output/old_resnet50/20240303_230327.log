2024-03-03 23:03:27,628 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: GCC 11.4
MMCV CUDA Compiler: 11.8
MMClassification: 0.15.0+2491f41
------------------------------------------------------------

2024-03-03 23:03:27,629 - mmcls - INFO - Distributed training: False
2024-03-03 23:03:27,755 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=17,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=100)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/resnet50_b16x8_flowers'
gpu_ids = range(0, 1)

2024-03-03 23:03:28,003 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2024-03-03 23:03:28,294 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([17, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([17]): 
NormalInit: mean=0, std=0.01, bias=0 
2024-03-03 23:03:31,744 - mmcls - INFO - Start running, host: u3311680@gpu2-comp-100, work_dir: /userhome/cs2/u3311680/oxford-cnn/output/resnet50_b16x8_flowers
2024-03-03 23:03:31,745 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-03-03 23:03:31,745 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2024-03-03 23:03:31,745 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/u3311680/oxford-cnn/output/resnet50_b16x8_flowers by HardDiskBackend.
2024-03-03 23:03:48,294 - mmcls - INFO - Saving checkpoint at 1 epochs
2024-03-03 23:03:51,409 - mmcls - INFO - Epoch(val) [1][6]	accuracy_top-1: 17.0588, accuracy_top-5: 66.4706
2024-03-03 23:04:01,957 - mmcls - INFO - Saving checkpoint at 2 epochs
2024-03-03 23:04:04,290 - mmcls - INFO - Epoch(val) [2][6]	accuracy_top-1: 40.5882, accuracy_top-5: 90.0000
2024-03-03 23:04:15,055 - mmcls - INFO - Saving checkpoint at 3 epochs
2024-03-03 23:04:17,745 - mmcls - INFO - Epoch(val) [3][6]	accuracy_top-1: 45.8824, accuracy_top-5: 91.7647
2024-03-03 23:04:28,502 - mmcls - INFO - Saving checkpoint at 4 epochs
2024-03-03 23:04:31,287 - mmcls - INFO - Epoch(val) [4][6]	accuracy_top-1: 44.1176, accuracy_top-5: 87.6471
2024-03-03 23:04:42,195 - mmcls - INFO - Saving checkpoint at 5 epochs
2024-03-03 23:04:44,813 - mmcls - INFO - Epoch(val) [5][6]	accuracy_top-1: 50.0000, accuracy_top-5: 92.3529
2024-03-03 23:04:55,632 - mmcls - INFO - Saving checkpoint at 6 epochs
2024-03-03 23:04:58,743 - mmcls - INFO - Epoch(val) [6][6]	accuracy_top-1: 52.9412, accuracy_top-5: 90.0000
2024-03-03 23:05:09,530 - mmcls - INFO - Saving checkpoint at 7 epochs
2024-03-03 23:05:12,177 - mmcls - INFO - Epoch(val) [7][6]	accuracy_top-1: 52.3529, accuracy_top-5: 94.1176
2024-03-03 23:05:22,789 - mmcls - INFO - Saving checkpoint at 8 epochs
2024-03-03 23:05:25,337 - mmcls - INFO - Epoch(val) [8][6]	accuracy_top-1: 52.9412, accuracy_top-5: 92.9412
2024-03-03 23:05:36,112 - mmcls - INFO - Saving checkpoint at 9 epochs
2024-03-03 23:05:38,660 - mmcls - INFO - Epoch(val) [9][6]	accuracy_top-1: 52.3529, accuracy_top-5: 94.7059
2024-03-03 23:05:49,067 - mmcls - INFO - Saving checkpoint at 10 epochs
2024-03-03 23:05:51,790 - mmcls - INFO - Epoch(val) [10][6]	accuracy_top-1: 51.1765, accuracy_top-5: 91.7647
2024-03-03 23:06:02,397 - mmcls - INFO - Saving checkpoint at 11 epochs
2024-03-03 23:06:04,935 - mmcls - INFO - Epoch(val) [11][6]	accuracy_top-1: 56.4706, accuracy_top-5: 95.2941
2024-03-03 23:06:15,588 - mmcls - INFO - Saving checkpoint at 12 epochs
2024-03-03 23:06:18,352 - mmcls - INFO - Epoch(val) [12][6]	accuracy_top-1: 63.5294, accuracy_top-5: 97.0588
2024-03-03 23:06:28,913 - mmcls - INFO - Saving checkpoint at 13 epochs
2024-03-03 23:06:31,480 - mmcls - INFO - Epoch(val) [13][6]	accuracy_top-1: 57.0588, accuracy_top-5: 95.2941
2024-03-03 23:06:41,939 - mmcls - INFO - Saving checkpoint at 14 epochs
2024-03-03 23:06:44,591 - mmcls - INFO - Epoch(val) [14][6]	accuracy_top-1: 61.7647, accuracy_top-5: 96.4706
2024-03-03 23:06:55,439 - mmcls - INFO - Saving checkpoint at 15 epochs
2024-03-03 23:06:58,209 - mmcls - INFO - Epoch(val) [15][6]	accuracy_top-1: 64.1176, accuracy_top-5: 98.2353
2024-03-03 23:07:08,759 - mmcls - INFO - Saving checkpoint at 16 epochs
2024-03-03 23:07:11,524 - mmcls - INFO - Epoch(val) [16][6]	accuracy_top-1: 62.3529, accuracy_top-5: 95.8824
2024-03-03 23:07:22,899 - mmcls - INFO - Saving checkpoint at 17 epochs
2024-03-03 23:07:25,374 - mmcls - INFO - Epoch(val) [17][6]	accuracy_top-1: 66.4706, accuracy_top-5: 97.0588
2024-03-03 23:07:35,683 - mmcls - INFO - Saving checkpoint at 18 epochs
2024-03-03 23:07:38,221 - mmcls - INFO - Epoch(val) [18][6]	accuracy_top-1: 71.1765, accuracy_top-5: 98.2353
2024-03-03 23:07:48,710 - mmcls - INFO - Saving checkpoint at 19 epochs
2024-03-03 23:07:51,271 - mmcls - INFO - Epoch(val) [19][6]	accuracy_top-1: 61.7647, accuracy_top-5: 97.6471
2024-03-03 23:08:01,610 - mmcls - INFO - Saving checkpoint at 20 epochs
2024-03-03 23:08:04,122 - mmcls - INFO - Epoch(val) [20][6]	accuracy_top-1: 64.1176, accuracy_top-5: 98.8235
2024-03-03 23:08:14,566 - mmcls - INFO - Saving checkpoint at 21 epochs
2024-03-03 23:08:17,389 - mmcls - INFO - Epoch(val) [21][6]	accuracy_top-1: 57.0588, accuracy_top-5: 93.5294
2024-03-03 23:08:28,313 - mmcls - INFO - Saving checkpoint at 22 epochs
2024-03-03 23:08:31,025 - mmcls - INFO - Epoch(val) [22][6]	accuracy_top-1: 69.4118, accuracy_top-5: 98.2353
2024-03-03 23:08:41,704 - mmcls - INFO - Saving checkpoint at 23 epochs
2024-03-03 23:08:44,373 - mmcls - INFO - Epoch(val) [23][6]	accuracy_top-1: 71.1765, accuracy_top-5: 97.6471
2024-03-03 23:08:55,196 - mmcls - INFO - Saving checkpoint at 24 epochs
2024-03-03 23:08:57,769 - mmcls - INFO - Epoch(val) [24][6]	accuracy_top-1: 66.4706, accuracy_top-5: 97.0588
2024-03-03 23:09:08,299 - mmcls - INFO - Saving checkpoint at 25 epochs
2024-03-03 23:09:10,898 - mmcls - INFO - Epoch(val) [25][6]	accuracy_top-1: 71.1765, accuracy_top-5: 96.4706
2024-03-03 23:09:21,460 - mmcls - INFO - Saving checkpoint at 26 epochs
2024-03-03 23:09:23,968 - mmcls - INFO - Epoch(val) [26][6]	accuracy_top-1: 71.1765, accuracy_top-5: 96.4706
2024-03-03 23:09:34,651 - mmcls - INFO - Saving checkpoint at 27 epochs
2024-03-03 23:09:37,130 - mmcls - INFO - Epoch(val) [27][6]	accuracy_top-1: 77.6471, accuracy_top-5: 98.2353
2024-03-03 23:09:47,663 - mmcls - INFO - Saving checkpoint at 28 epochs
2024-03-03 23:09:50,353 - mmcls - INFO - Epoch(val) [28][6]	accuracy_top-1: 75.2941, accuracy_top-5: 99.4118
2024-03-03 23:10:01,026 - mmcls - INFO - Saving checkpoint at 29 epochs
2024-03-03 23:10:03,623 - mmcls - INFO - Epoch(val) [29][6]	accuracy_top-1: 74.7059, accuracy_top-5: 98.8235
2024-03-03 23:10:14,272 - mmcls - INFO - Saving checkpoint at 30 epochs
2024-03-03 23:10:16,942 - mmcls - INFO - Epoch(val) [30][6]	accuracy_top-1: 65.2941, accuracy_top-5: 94.7059
2024-03-03 23:10:28,061 - mmcls - INFO - Saving checkpoint at 31 epochs
2024-03-03 23:10:30,548 - mmcls - INFO - Epoch(val) [31][6]	accuracy_top-1: 75.8824, accuracy_top-5: 98.2353
2024-03-03 23:10:40,982 - mmcls - INFO - Saving checkpoint at 32 epochs
2024-03-03 23:10:43,530 - mmcls - INFO - Epoch(val) [32][6]	accuracy_top-1: 79.4118, accuracy_top-5: 98.8235
2024-03-03 23:10:54,253 - mmcls - INFO - Saving checkpoint at 33 epochs
2024-03-03 23:10:56,761 - mmcls - INFO - Epoch(val) [33][6]	accuracy_top-1: 72.3529, accuracy_top-5: 98.8235
2024-03-03 23:11:07,418 - mmcls - INFO - Saving checkpoint at 34 epochs
2024-03-03 23:11:10,015 - mmcls - INFO - Epoch(val) [34][6]	accuracy_top-1: 77.0588, accuracy_top-5: 97.0588
2024-03-03 23:11:20,515 - mmcls - INFO - Saving checkpoint at 35 epochs
2024-03-03 23:11:23,076 - mmcls - INFO - Epoch(val) [35][6]	accuracy_top-1: 75.8824, accuracy_top-5: 98.8235
2024-03-03 23:11:33,937 - mmcls - INFO - Saving checkpoint at 36 epochs
2024-03-03 23:11:36,541 - mmcls - INFO - Epoch(val) [36][6]	accuracy_top-1: 73.5294, accuracy_top-5: 97.0588
2024-03-03 23:11:47,802 - mmcls - INFO - Saving checkpoint at 37 epochs
2024-03-03 23:11:50,243 - mmcls - INFO - Epoch(val) [37][6]	accuracy_top-1: 65.8824, accuracy_top-5: 95.8824
2024-03-03 23:12:00,797 - mmcls - INFO - Saving checkpoint at 38 epochs
2024-03-03 23:12:03,582 - mmcls - INFO - Epoch(val) [38][6]	accuracy_top-1: 78.8235, accuracy_top-5: 97.6471
2024-03-03 23:12:14,477 - mmcls - INFO - Saving checkpoint at 39 epochs
2024-03-03 23:12:16,993 - mmcls - INFO - Epoch(val) [39][6]	accuracy_top-1: 75.8824, accuracy_top-5: 98.8235
2024-03-03 23:12:27,436 - mmcls - INFO - Saving checkpoint at 40 epochs
2024-03-03 23:12:29,985 - mmcls - INFO - Epoch(val) [40][6]	accuracy_top-1: 78.2353, accuracy_top-5: 98.8235
2024-03-03 23:12:40,521 - mmcls - INFO - Saving checkpoint at 41 epochs
2024-03-03 23:12:43,031 - mmcls - INFO - Epoch(val) [41][6]	accuracy_top-1: 75.8824, accuracy_top-5: 99.4118
2024-03-03 23:12:53,389 - mmcls - INFO - Saving checkpoint at 42 epochs
2024-03-03 23:12:56,183 - mmcls - INFO - Epoch(val) [42][6]	accuracy_top-1: 85.2941, accuracy_top-5: 99.4118
2024-03-03 23:13:06,894 - mmcls - INFO - Saving checkpoint at 43 epochs
2024-03-03 23:13:09,588 - mmcls - INFO - Epoch(val) [43][6]	accuracy_top-1: 81.7647, accuracy_top-5: 97.6471
2024-03-03 23:13:20,218 - mmcls - INFO - Saving checkpoint at 44 epochs
2024-03-03 23:13:22,741 - mmcls - INFO - Epoch(val) [44][6]	accuracy_top-1: 78.2353, accuracy_top-5: 96.4706
2024-03-03 23:13:33,327 - mmcls - INFO - Saving checkpoint at 45 epochs
2024-03-03 23:13:36,186 - mmcls - INFO - Epoch(val) [45][6]	accuracy_top-1: 81.1765, accuracy_top-5: 98.2353
2024-03-03 23:13:46,891 - mmcls - INFO - Saving checkpoint at 46 epochs
2024-03-03 23:13:49,403 - mmcls - INFO - Epoch(val) [46][6]	accuracy_top-1: 80.5882, accuracy_top-5: 98.8235
2024-03-03 23:13:59,985 - mmcls - INFO - Saving checkpoint at 47 epochs
2024-03-03 23:14:02,688 - mmcls - INFO - Epoch(val) [47][6]	accuracy_top-1: 77.0588, accuracy_top-5: 98.8235
2024-03-03 23:14:13,165 - mmcls - INFO - Saving checkpoint at 48 epochs
2024-03-03 23:14:15,619 - mmcls - INFO - Epoch(val) [48][6]	accuracy_top-1: 85.8824, accuracy_top-5: 100.0000
2024-03-03 23:14:26,270 - mmcls - INFO - Saving checkpoint at 49 epochs
2024-03-03 23:14:28,789 - mmcls - INFO - Epoch(val) [49][6]	accuracy_top-1: 80.0000, accuracy_top-5: 99.4118
2024-03-03 23:14:39,532 - mmcls - INFO - Saving checkpoint at 50 epochs
2024-03-03 23:14:42,194 - mmcls - INFO - Epoch(val) [50][6]	accuracy_top-1: 84.1176, accuracy_top-5: 99.4118
2024-03-03 23:14:52,821 - mmcls - INFO - Saving checkpoint at 51 epochs
2024-03-03 23:14:55,553 - mmcls - INFO - Epoch(val) [51][6]	accuracy_top-1: 84.7059, accuracy_top-5: 98.2353
2024-03-03 23:15:06,265 - mmcls - INFO - Saving checkpoint at 52 epochs
2024-03-03 23:15:08,812 - mmcls - INFO - Epoch(val) [52][6]	accuracy_top-1: 84.7059, accuracy_top-5: 98.8235
2024-03-03 23:15:19,403 - mmcls - INFO - Saving checkpoint at 53 epochs
2024-03-03 23:15:22,077 - mmcls - INFO - Epoch(val) [53][6]	accuracy_top-1: 80.0000, accuracy_top-5: 98.8235
2024-03-03 23:15:33,680 - mmcls - INFO - Saving checkpoint at 54 epochs
2024-03-03 23:15:36,233 - mmcls - INFO - Epoch(val) [54][6]	accuracy_top-1: 81.7647, accuracy_top-5: 99.4118
2024-03-03 23:15:46,843 - mmcls - INFO - Saving checkpoint at 55 epochs
2024-03-03 23:15:49,750 - mmcls - INFO - Epoch(val) [55][6]	accuracy_top-1: 82.3529, accuracy_top-5: 100.0000
2024-03-03 23:16:00,427 - mmcls - INFO - Saving checkpoint at 56 epochs
2024-03-03 23:16:02,877 - mmcls - INFO - Epoch(val) [56][6]	accuracy_top-1: 85.2941, accuracy_top-5: 98.8235
2024-03-03 23:16:13,228 - mmcls - INFO - Saving checkpoint at 57 epochs
2024-03-03 23:16:15,693 - mmcls - INFO - Epoch(val) [57][6]	accuracy_top-1: 84.1176, accuracy_top-5: 98.8235
2024-03-03 23:16:26,033 - mmcls - INFO - Saving checkpoint at 58 epochs
2024-03-03 23:16:28,504 - mmcls - INFO - Epoch(val) [58][6]	accuracy_top-1: 83.5294, accuracy_top-5: 99.4118
2024-03-03 23:16:38,912 - mmcls - INFO - Saving checkpoint at 59 epochs
2024-03-03 23:16:41,285 - mmcls - INFO - Epoch(val) [59][6]	accuracy_top-1: 84.7059, accuracy_top-5: 98.8235
2024-03-03 23:16:51,659 - mmcls - INFO - Saving checkpoint at 60 epochs
2024-03-03 23:16:54,216 - mmcls - INFO - Epoch(val) [60][6]	accuracy_top-1: 87.0588, accuracy_top-5: 98.8235
2024-03-03 23:17:04,701 - mmcls - INFO - Saving checkpoint at 61 epochs
2024-03-03 23:17:07,165 - mmcls - INFO - Epoch(val) [61][6]	accuracy_top-1: 87.6471, accuracy_top-5: 99.4118
2024-03-03 23:17:17,757 - mmcls - INFO - Saving checkpoint at 62 epochs
2024-03-03 23:17:20,371 - mmcls - INFO - Epoch(val) [62][6]	accuracy_top-1: 78.8235, accuracy_top-5: 97.0588
2024-03-03 23:17:31,711 - mmcls - INFO - Saving checkpoint at 63 epochs
2024-03-03 23:17:34,656 - mmcls - INFO - Epoch(val) [63][6]	accuracy_top-1: 78.2353, accuracy_top-5: 98.8235
2024-03-03 23:17:45,244 - mmcls - INFO - Saving checkpoint at 64 epochs
2024-03-03 23:17:47,923 - mmcls - INFO - Epoch(val) [64][6]	accuracy_top-1: 87.6471, accuracy_top-5: 99.4118
2024-03-03 23:17:58,390 - mmcls - INFO - Saving checkpoint at 65 epochs
2024-03-03 23:18:00,871 - mmcls - INFO - Epoch(val) [65][6]	accuracy_top-1: 86.4706, accuracy_top-5: 100.0000
2024-03-03 23:18:11,444 - mmcls - INFO - Saving checkpoint at 66 epochs
2024-03-03 23:18:14,095 - mmcls - INFO - Epoch(val) [66][6]	accuracy_top-1: 85.2941, accuracy_top-5: 99.4118
2024-03-03 23:18:24,609 - mmcls - INFO - Saving checkpoint at 67 epochs
2024-03-03 23:18:27,174 - mmcls - INFO - Epoch(val) [67][6]	accuracy_top-1: 88.8235, accuracy_top-5: 99.4118
2024-03-03 23:18:37,839 - mmcls - INFO - Saving checkpoint at 68 epochs
2024-03-03 23:18:40,371 - mmcls - INFO - Epoch(val) [68][6]	accuracy_top-1: 82.9412, accuracy_top-5: 99.4118
2024-03-03 23:18:50,660 - mmcls - INFO - Saving checkpoint at 69 epochs
2024-03-03 23:18:53,218 - mmcls - INFO - Epoch(val) [69][6]	accuracy_top-1: 87.0588, accuracy_top-5: 99.4118
2024-03-03 23:19:04,078 - mmcls - INFO - Saving checkpoint at 70 epochs
2024-03-03 23:19:06,736 - mmcls - INFO - Epoch(val) [70][6]	accuracy_top-1: 89.4118, accuracy_top-5: 99.4118
2024-03-03 23:19:17,059 - mmcls - INFO - Saving checkpoint at 71 epochs
2024-03-03 23:19:19,637 - mmcls - INFO - Epoch(val) [71][6]	accuracy_top-1: 87.6471, accuracy_top-5: 100.0000
2024-03-03 23:19:30,096 - mmcls - INFO - Saving checkpoint at 72 epochs
2024-03-03 23:19:32,685 - mmcls - INFO - Epoch(val) [72][6]	accuracy_top-1: 85.2941, accuracy_top-5: 98.8235
2024-03-03 23:19:43,324 - mmcls - INFO - Saving checkpoint at 73 epochs
2024-03-03 23:19:46,249 - mmcls - INFO - Epoch(val) [73][6]	accuracy_top-1: 82.9412, accuracy_top-5: 100.0000
2024-03-03 23:19:56,682 - mmcls - INFO - Saving checkpoint at 74 epochs
2024-03-03 23:19:59,117 - mmcls - INFO - Epoch(val) [74][6]	accuracy_top-1: 85.8824, accuracy_top-5: 100.0000
2024-03-03 23:20:09,492 - mmcls - INFO - Saving checkpoint at 75 epochs
2024-03-03 23:20:11,929 - mmcls - INFO - Epoch(val) [75][6]	accuracy_top-1: 88.8235, accuracy_top-5: 99.4118
2024-03-03 23:20:22,515 - mmcls - INFO - Saving checkpoint at 76 epochs
2024-03-03 23:20:25,014 - mmcls - INFO - Epoch(val) [76][6]	accuracy_top-1: 78.8235, accuracy_top-5: 98.2353
2024-03-03 23:20:35,869 - mmcls - INFO - Saving checkpoint at 77 epochs
2024-03-03 23:20:38,629 - mmcls - INFO - Epoch(val) [77][6]	accuracy_top-1: 87.0588, accuracy_top-5: 98.8235
2024-03-03 23:20:49,095 - mmcls - INFO - Saving checkpoint at 78 epochs
2024-03-03 23:20:51,693 - mmcls - INFO - Epoch(val) [78][6]	accuracy_top-1: 85.2941, accuracy_top-5: 99.4118
2024-03-03 23:21:02,400 - mmcls - INFO - Saving checkpoint at 79 epochs
2024-03-03 23:21:05,073 - mmcls - INFO - Epoch(val) [79][6]	accuracy_top-1: 91.1765, accuracy_top-5: 99.4118
2024-03-03 23:21:15,618 - mmcls - INFO - Saving checkpoint at 80 epochs
2024-03-03 23:21:18,230 - mmcls - INFO - Epoch(val) [80][6]	accuracy_top-1: 84.7059, accuracy_top-5: 98.8235
2024-03-03 23:21:28,709 - mmcls - INFO - Saving checkpoint at 81 epochs
2024-03-03 23:21:31,305 - mmcls - INFO - Epoch(val) [81][6]	accuracy_top-1: 87.0588, accuracy_top-5: 99.4118
2024-03-03 23:21:41,836 - mmcls - INFO - Saving checkpoint at 82 epochs
2024-03-03 23:21:44,564 - mmcls - INFO - Epoch(val) [82][6]	accuracy_top-1: 94.1176, accuracy_top-5: 99.4118
2024-03-03 23:21:55,034 - mmcls - INFO - Saving checkpoint at 83 epochs
2024-03-03 23:21:57,729 - mmcls - INFO - Epoch(val) [83][6]	accuracy_top-1: 90.0000, accuracy_top-5: 100.0000
2024-03-03 23:22:08,957 - mmcls - INFO - Saving checkpoint at 84 epochs
2024-03-03 23:22:11,595 - mmcls - INFO - Epoch(val) [84][6]	accuracy_top-1: 88.8235, accuracy_top-5: 100.0000
2024-03-03 23:22:21,919 - mmcls - INFO - Saving checkpoint at 85 epochs
2024-03-03 23:22:24,357 - mmcls - INFO - Epoch(val) [85][6]	accuracy_top-1: 85.8824, accuracy_top-5: 99.4118
2024-03-03 23:22:34,650 - mmcls - INFO - Saving checkpoint at 86 epochs
2024-03-03 23:22:37,241 - mmcls - INFO - Epoch(val) [86][6]	accuracy_top-1: 86.4706, accuracy_top-5: 99.4118
2024-03-03 23:22:48,016 - mmcls - INFO - Saving checkpoint at 87 epochs
2024-03-03 23:22:50,825 - mmcls - INFO - Epoch(val) [87][6]	accuracy_top-1: 90.0000, accuracy_top-5: 98.8235
2024-03-03 23:23:01,438 - mmcls - INFO - Saving checkpoint at 88 epochs
2024-03-03 23:23:04,329 - mmcls - INFO - Epoch(val) [88][6]	accuracy_top-1: 92.3529, accuracy_top-5: 99.4118
2024-03-03 23:23:14,923 - mmcls - INFO - Saving checkpoint at 89 epochs
2024-03-03 23:23:17,600 - mmcls - INFO - Epoch(val) [89][6]	accuracy_top-1: 90.5882, accuracy_top-5: 99.4118
2024-03-03 23:23:28,006 - mmcls - INFO - Saving checkpoint at 90 epochs
2024-03-03 23:23:30,716 - mmcls - INFO - Epoch(val) [90][6]	accuracy_top-1: 95.2941, accuracy_top-5: 99.4118
2024-03-03 23:23:41,216 - mmcls - INFO - Saving checkpoint at 91 epochs
2024-03-03 23:23:43,643 - mmcls - INFO - Epoch(val) [91][6]	accuracy_top-1: 93.5294, accuracy_top-5: 100.0000
2024-03-03 23:23:54,028 - mmcls - INFO - Saving checkpoint at 92 epochs
2024-03-03 23:23:56,704 - mmcls - INFO - Epoch(val) [92][6]	accuracy_top-1: 90.0000, accuracy_top-5: 99.4118
2024-03-03 23:24:07,461 - mmcls - INFO - Saving checkpoint at 93 epochs
2024-03-03 23:24:10,033 - mmcls - INFO - Epoch(val) [93][6]	accuracy_top-1: 87.6471, accuracy_top-5: 99.4118
2024-03-03 23:24:20,626 - mmcls - INFO - Saving checkpoint at 94 epochs
2024-03-03 23:24:23,204 - mmcls - INFO - Epoch(val) [94][6]	accuracy_top-1: 84.1176, accuracy_top-5: 100.0000
2024-03-03 23:24:33,766 - mmcls - INFO - Saving checkpoint at 95 epochs
2024-03-03 23:24:36,448 - mmcls - INFO - Epoch(val) [95][6]	accuracy_top-1: 84.7059, accuracy_top-5: 98.8235
2024-03-03 23:24:47,088 - mmcls - INFO - Saving checkpoint at 96 epochs
2024-03-03 23:24:49,872 - mmcls - INFO - Epoch(val) [96][6]	accuracy_top-1: 90.5882, accuracy_top-5: 99.4118
2024-03-03 23:25:00,149 - mmcls - INFO - Saving checkpoint at 97 epochs
2024-03-03 23:25:02,658 - mmcls - INFO - Epoch(val) [97][6]	accuracy_top-1: 90.5882, accuracy_top-5: 99.4118
2024-03-03 23:25:12,800 - mmcls - INFO - Saving checkpoint at 98 epochs
2024-03-03 23:25:16,061 - mmcls - INFO - Epoch(val) [98][6]	accuracy_top-1: 90.5882, accuracy_top-5: 99.4118
2024-03-03 23:25:26,849 - mmcls - INFO - Saving checkpoint at 99 epochs
2024-03-03 23:25:29,364 - mmcls - INFO - Epoch(val) [99][6]	accuracy_top-1: 94.1176, accuracy_top-5: 99.4118
2024-03-03 23:25:39,991 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-03-03 23:25:42,579 - mmcls - INFO - Epoch(val) [100][6]	accuracy_top-1: 94.7059, accuracy_top-5: 99.4118
