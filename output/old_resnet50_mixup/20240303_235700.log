2024-03-03 23:57:00,705 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: GCC 11.4
MMCV CUDA Compiler: 11.8
MMClassification: 0.15.0+dd4c5c4
------------------------------------------------------------

2024-03-03 23:57:00,705 - mmcls - INFO - Distributed training: False
2024-03-03 23:57:00,833 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='MultiLabelLinearClsHead',
        num_classes=17,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0, use_soft=True)),
    train_cfg=dict(
        augments=dict(type='BatchMixup', alpha=1.0, num_classes=17, prob=1.0)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=100)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/resnet50_b16x8_flowers_mixup'
gpu_ids = range(0, 1)

2024-03-03 23:57:01,078 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2024-03-03 23:57:01,360 - mmcls - INFO - initialize MultiLabelLinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([17, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([17]): 
NormalInit: mean=0, std=0.01, bias=0 
2024-03-03 23:57:04,788 - mmcls - INFO - Start running, host: u3311680@gpu2-comp-100, work_dir: /userhome/cs2/u3311680/oxford-cnn/output/resnet50_b16x8_flowers_mixup
2024-03-03 23:57:04,788 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-03-03 23:57:04,788 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2024-03-03 23:57:04,788 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/u3311680/oxford-cnn/output/resnet50_b16x8_flowers_mixup by HardDiskBackend.
2024-03-03 23:57:16,099 - mmcls - INFO - Epoch [1][100/169]	lr: 1.000e-01, eta: 0:31:38, time: 0.113, data_time: 0.029, memory: 984, loss: 4.8019
2024-03-03 23:57:22,467 - mmcls - INFO - Saving checkpoint at 1 epochs
2024-03-03 23:57:25,828 - mmcls - INFO - Epoch(val) [1][22]	accuracy_top-1: 14.1176, accuracy_top-5: 55.2941
2024-03-03 23:57:35,034 - mmcls - INFO - Epoch [2][100/169]	lr: 1.000e-01, eta: 0:21:07, time: 0.092, data_time: 0.027, memory: 984, loss: 2.7558
2024-03-03 23:57:39,642 - mmcls - INFO - Saving checkpoint at 2 epochs
2024-03-03 23:57:41,947 - mmcls - INFO - Epoch(val) [2][22]	accuracy_top-1: 18.8235, accuracy_top-5: 65.8824
2024-03-03 23:57:51,325 - mmcls - INFO - Epoch [3][100/169]	lr: 1.000e-01, eta: 0:18:42, time: 0.094, data_time: 0.026, memory: 984, loss: 2.6845
2024-03-03 23:57:55,964 - mmcls - INFO - Saving checkpoint at 3 epochs
2024-03-03 23:57:58,495 - mmcls - INFO - Epoch(val) [3][22]	accuracy_top-1: 14.1176, accuracy_top-5: 71.7647
2024-03-03 23:58:07,491 - mmcls - INFO - Epoch [4][100/169]	lr: 1.000e-01, eta: 0:17:22, time: 0.090, data_time: 0.026, memory: 984, loss: 2.6658
2024-03-03 23:58:12,398 - mmcls - INFO - Saving checkpoint at 4 epochs
2024-03-03 23:58:14,862 - mmcls - INFO - Epoch(val) [4][22]	accuracy_top-1: 23.5294, accuracy_top-5: 72.9412
2024-03-03 23:58:24,430 - mmcls - INFO - Epoch [5][100/169]	lr: 1.000e-01, eta: 0:16:45, time: 0.096, data_time: 0.027, memory: 984, loss: 2.6001
2024-03-03 23:58:29,294 - mmcls - INFO - Saving checkpoint at 5 epochs
2024-03-03 23:58:31,768 - mmcls - INFO - Epoch(val) [5][22]	accuracy_top-1: 28.8235, accuracy_top-5: 75.8824
2024-03-03 23:58:41,132 - mmcls - INFO - Epoch [6][100/169]	lr: 1.000e-01, eta: 0:16:15, time: 0.094, data_time: 0.027, memory: 984, loss: 2.5747
2024-03-03 23:58:45,944 - mmcls - INFO - Saving checkpoint at 6 epochs
2024-03-03 23:58:48,390 - mmcls - INFO - Epoch(val) [6][22]	accuracy_top-1: 27.6471, accuracy_top-5: 78.2353
2024-03-03 23:58:57,656 - mmcls - INFO - Epoch [7][100/169]	lr: 1.000e-01, eta: 0:15:49, time: 0.093, data_time: 0.027, memory: 984, loss: 2.5278
2024-03-03 23:59:02,647 - mmcls - INFO - Saving checkpoint at 7 epochs
2024-03-03 23:59:05,130 - mmcls - INFO - Epoch(val) [7][22]	accuracy_top-1: 22.3529, accuracy_top-5: 80.0000
2024-03-03 23:59:13,974 - mmcls - INFO - Epoch [8][100/169]	lr: 1.000e-01, eta: 0:15:23, time: 0.088, data_time: 0.026, memory: 984, loss: 2.5174
2024-03-03 23:59:18,761 - mmcls - INFO - Saving checkpoint at 8 epochs
2024-03-03 23:59:21,135 - mmcls - INFO - Epoch(val) [8][22]	accuracy_top-1: 30.5882, accuracy_top-5: 80.0000
2024-03-03 23:59:30,464 - mmcls - INFO - Epoch [9][100/169]	lr: 1.000e-01, eta: 0:15:06, time: 0.093, data_time: 0.027, memory: 984, loss: 2.4567
2024-03-03 23:59:35,984 - mmcls - INFO - Saving checkpoint at 9 epochs
2024-03-03 23:59:38,467 - mmcls - INFO - Epoch(val) [9][22]	accuracy_top-1: 37.0588, accuracy_top-5: 83.5294
2024-03-03 23:59:47,708 - mmcls - INFO - Epoch [10][100/169]	lr: 1.000e-01, eta: 0:14:49, time: 0.092, data_time: 0.026, memory: 984, loss: 2.3753
2024-03-03 23:59:52,945 - mmcls - INFO - Saving checkpoint at 10 epochs
2024-03-03 23:59:55,315 - mmcls - INFO - Epoch(val) [10][22]	accuracy_top-1: 41.7647, accuracy_top-5: 86.4706
2024-03-04 00:00:04,631 - mmcls - INFO - Epoch [11][100/169]	lr: 1.000e-01, eta: 0:14:35, time: 0.093, data_time: 0.026, memory: 984, loss: 2.3703
2024-03-04 00:00:09,402 - mmcls - INFO - Saving checkpoint at 11 epochs
2024-03-04 00:00:11,800 - mmcls - INFO - Epoch(val) [11][22]	accuracy_top-1: 41.1765, accuracy_top-5: 90.0000
2024-03-04 00:00:20,781 - mmcls - INFO - Epoch [12][100/169]	lr: 1.000e-01, eta: 0:14:19, time: 0.090, data_time: 0.026, memory: 984, loss: 2.3636
2024-03-04 00:00:25,455 - mmcls - INFO - Saving checkpoint at 12 epochs
2024-03-04 00:00:27,868 - mmcls - INFO - Epoch(val) [12][22]	accuracy_top-1: 45.2941, accuracy_top-5: 92.9412
2024-03-04 00:00:37,430 - mmcls - INFO - Epoch [13][100/169]	lr: 1.000e-01, eta: 0:14:07, time: 0.094, data_time: 0.027, memory: 984, loss: 2.2960
2024-03-04 00:00:42,420 - mmcls - INFO - Saving checkpoint at 13 epochs
2024-03-04 00:00:44,856 - mmcls - INFO - Epoch(val) [13][22]	accuracy_top-1: 42.9412, accuracy_top-5: 93.5294
2024-03-04 00:00:54,428 - mmcls - INFO - Epoch [14][100/169]	lr: 1.000e-01, eta: 0:13:57, time: 0.096, data_time: 0.028, memory: 984, loss: 2.2798
2024-03-04 00:00:59,375 - mmcls - INFO - Saving checkpoint at 14 epochs
2024-03-04 00:01:01,743 - mmcls - INFO - Epoch(val) [14][22]	accuracy_top-1: 49.4118, accuracy_top-5: 91.7647
2024-03-04 00:01:11,433 - mmcls - INFO - Epoch [15][100/169]	lr: 1.000e-01, eta: 0:13:47, time: 0.097, data_time: 0.028, memory: 984, loss: 2.1918
2024-03-04 00:01:16,373 - mmcls - INFO - Saving checkpoint at 15 epochs
2024-03-04 00:01:18,796 - mmcls - INFO - Epoch(val) [15][22]	accuracy_top-1: 48.8235, accuracy_top-5: 91.1765
2024-03-04 00:01:28,030 - mmcls - INFO - Epoch [16][100/169]	lr: 1.000e-01, eta: 0:13:35, time: 0.092, data_time: 0.027, memory: 984, loss: 2.1968
2024-03-04 00:01:32,822 - mmcls - INFO - Saving checkpoint at 16 epochs
2024-03-04 00:01:35,294 - mmcls - INFO - Epoch(val) [16][22]	accuracy_top-1: 53.5294, accuracy_top-5: 94.1176
2024-03-04 00:01:44,647 - mmcls - INFO - Epoch [17][100/169]	lr: 1.000e-01, eta: 0:13:23, time: 0.093, data_time: 0.027, memory: 984, loss: 2.1307
2024-03-04 00:01:49,439 - mmcls - INFO - Saving checkpoint at 17 epochs
2024-03-04 00:01:51,673 - mmcls - INFO - Epoch(val) [17][22]	accuracy_top-1: 51.7647, accuracy_top-5: 94.1176
2024-03-04 00:02:01,305 - mmcls - INFO - Epoch [18][100/169]	lr: 1.000e-01, eta: 0:13:14, time: 0.096, data_time: 0.027, memory: 984, loss: 2.2223
2024-03-04 00:02:06,346 - mmcls - INFO - Saving checkpoint at 18 epochs
2024-03-04 00:02:08,804 - mmcls - INFO - Epoch(val) [18][22]	accuracy_top-1: 54.1176, accuracy_top-5: 94.1176
2024-03-04 00:02:17,851 - mmcls - INFO - Epoch [19][100/169]	lr: 1.000e-01, eta: 0:13:01, time: 0.090, data_time: 0.027, memory: 984, loss: 2.1048
2024-03-04 00:02:22,823 - mmcls - INFO - Saving checkpoint at 19 epochs
2024-03-04 00:02:25,278 - mmcls - INFO - Epoch(val) [19][22]	accuracy_top-1: 55.8824, accuracy_top-5: 92.3529
2024-03-04 00:02:34,320 - mmcls - INFO - Epoch [20][100/169]	lr: 1.000e-01, eta: 0:12:49, time: 0.090, data_time: 0.026, memory: 984, loss: 2.0518
2024-03-04 00:02:38,583 - mmcls - INFO - Saving checkpoint at 20 epochs
2024-03-04 00:02:41,024 - mmcls - INFO - Epoch(val) [20][22]	accuracy_top-1: 52.9412, accuracy_top-5: 93.5294
2024-03-04 00:02:50,177 - mmcls - INFO - Epoch [21][100/169]	lr: 1.000e-01, eta: 0:12:38, time: 0.091, data_time: 0.028, memory: 984, loss: 2.0759
2024-03-04 00:02:54,919 - mmcls - INFO - Saving checkpoint at 21 epochs
2024-03-04 00:02:57,421 - mmcls - INFO - Epoch(val) [21][22]	accuracy_top-1: 60.5882, accuracy_top-5: 94.1176
2024-03-04 00:03:06,659 - mmcls - INFO - Epoch [22][100/169]	lr: 1.000e-01, eta: 0:12:27, time: 0.092, data_time: 0.027, memory: 984, loss: 2.0532
2024-03-04 00:03:11,502 - mmcls - INFO - Saving checkpoint at 22 epochs
2024-03-04 00:03:14,049 - mmcls - INFO - Epoch(val) [22][22]	accuracy_top-1: 54.7059, accuracy_top-5: 93.5294
2024-03-04 00:03:23,546 - mmcls - INFO - Epoch [23][100/169]	lr: 1.000e-01, eta: 0:12:18, time: 0.095, data_time: 0.027, memory: 984, loss: 2.0715
2024-03-04 00:03:28,389 - mmcls - INFO - Saving checkpoint at 23 epochs
2024-03-04 00:03:30,873 - mmcls - INFO - Epoch(val) [23][22]	accuracy_top-1: 64.1176, accuracy_top-5: 98.2353
2024-03-04 00:03:40,615 - mmcls - INFO - Epoch [24][100/169]	lr: 1.000e-01, eta: 0:12:09, time: 0.097, data_time: 0.027, memory: 984, loss: 2.0243
2024-03-04 00:03:45,582 - mmcls - INFO - Saving checkpoint at 24 epochs
2024-03-04 00:03:48,122 - mmcls - INFO - Epoch(val) [24][22]	accuracy_top-1: 62.3529, accuracy_top-5: 92.9412
2024-03-04 00:03:57,505 - mmcls - INFO - Epoch [25][100/169]	lr: 1.000e-01, eta: 0:11:59, time: 0.094, data_time: 0.027, memory: 984, loss: 2.0272
2024-03-04 00:04:02,453 - mmcls - INFO - Saving checkpoint at 25 epochs
2024-03-04 00:04:04,871 - mmcls - INFO - Epoch(val) [25][22]	accuracy_top-1: 51.1765, accuracy_top-5: 94.7059
2024-03-04 00:04:14,715 - mmcls - INFO - Epoch [26][100/169]	lr: 1.000e-01, eta: 0:11:50, time: 0.098, data_time: 0.028, memory: 984, loss: 2.0211
2024-03-04 00:04:20,315 - mmcls - INFO - Saving checkpoint at 26 epochs
2024-03-04 00:04:22,778 - mmcls - INFO - Epoch(val) [26][22]	accuracy_top-1: 67.0588, accuracy_top-5: 97.6471
2024-03-04 00:04:31,905 - mmcls - INFO - Epoch [27][100/169]	lr: 1.000e-01, eta: 0:11:39, time: 0.091, data_time: 0.027, memory: 984, loss: 1.9848
2024-03-04 00:04:36,638 - mmcls - INFO - Saving checkpoint at 27 epochs
2024-03-04 00:04:39,209 - mmcls - INFO - Epoch(val) [27][22]	accuracy_top-1: 62.9412, accuracy_top-5: 93.5294
2024-03-04 00:04:48,757 - mmcls - INFO - Epoch [28][100/169]	lr: 1.000e-01, eta: 0:11:30, time: 0.095, data_time: 0.027, memory: 984, loss: 2.0403
2024-03-04 00:04:53,832 - mmcls - INFO - Saving checkpoint at 28 epochs
2024-03-04 00:04:56,240 - mmcls - INFO - Epoch(val) [28][22]	accuracy_top-1: 64.7059, accuracy_top-5: 97.6471
2024-03-04 00:05:05,314 - mmcls - INFO - Epoch [29][100/169]	lr: 1.000e-01, eta: 0:11:19, time: 0.091, data_time: 0.026, memory: 984, loss: 1.9349
2024-03-04 00:05:10,038 - mmcls - INFO - Saving checkpoint at 29 epochs
2024-03-04 00:05:12,265 - mmcls - INFO - Epoch(val) [29][22]	accuracy_top-1: 70.0000, accuracy_top-5: 98.8235
2024-03-04 00:05:22,366 - mmcls - INFO - Epoch [30][100/169]	lr: 1.000e-01, eta: 0:11:11, time: 0.101, data_time: 0.028, memory: 984, loss: 1.9421
2024-03-04 00:05:27,057 - mmcls - INFO - Saving checkpoint at 30 epochs
2024-03-04 00:05:29,435 - mmcls - INFO - Epoch(val) [30][22]	accuracy_top-1: 64.7059, accuracy_top-5: 97.0588
2024-03-04 00:05:39,502 - mmcls - INFO - Epoch [31][100/169]	lr: 1.000e-01, eta: 0:11:03, time: 0.101, data_time: 0.028, memory: 984, loss: 1.9605
2024-03-04 00:05:44,575 - mmcls - INFO - Saving checkpoint at 31 epochs
2024-03-04 00:05:47,434 - mmcls - INFO - Epoch(val) [31][22]	accuracy_top-1: 57.0588, accuracy_top-5: 95.2941
2024-03-04 00:05:56,350 - mmcls - INFO - Epoch [32][100/169]	lr: 1.000e-01, eta: 0:10:52, time: 0.089, data_time: 0.027, memory: 984, loss: 1.8927
2024-03-04 00:06:01,234 - mmcls - INFO - Saving checkpoint at 32 epochs
2024-03-04 00:06:03,574 - mmcls - INFO - Epoch(val) [32][22]	accuracy_top-1: 63.5294, accuracy_top-5: 95.2941
2024-03-04 00:06:12,914 - mmcls - INFO - Epoch [33][100/169]	lr: 1.000e-01, eta: 0:10:42, time: 0.093, data_time: 0.026, memory: 984, loss: 1.9293
2024-03-04 00:06:17,905 - mmcls - INFO - Saving checkpoint at 33 epochs
2024-03-04 00:06:20,371 - mmcls - INFO - Epoch(val) [33][22]	accuracy_top-1: 71.7647, accuracy_top-5: 97.6471
2024-03-04 00:06:30,392 - mmcls - INFO - Epoch [34][100/169]	lr: 1.000e-01, eta: 0:10:33, time: 0.100, data_time: 0.028, memory: 984, loss: 1.9100
2024-03-04 00:06:35,524 - mmcls - INFO - Saving checkpoint at 34 epochs
2024-03-04 00:06:37,993 - mmcls - INFO - Epoch(val) [34][22]	accuracy_top-1: 70.5882, accuracy_top-5: 97.0588
2024-03-04 00:06:47,548 - mmcls - INFO - Epoch [35][100/169]	lr: 1.000e-01, eta: 0:10:24, time: 0.095, data_time: 0.027, memory: 984, loss: 1.8977
2024-03-04 00:06:52,384 - mmcls - INFO - Saving checkpoint at 35 epochs
2024-03-04 00:06:54,908 - mmcls - INFO - Epoch(val) [35][22]	accuracy_top-1: 74.1176, accuracy_top-5: 97.0588
2024-03-04 00:07:04,132 - mmcls - INFO - Epoch [36][100/169]	lr: 1.000e-01, eta: 0:10:13, time: 0.092, data_time: 0.026, memory: 984, loss: 1.8242
2024-03-04 00:07:09,270 - mmcls - INFO - Saving checkpoint at 36 epochs
2024-03-04 00:07:11,753 - mmcls - INFO - Epoch(val) [36][22]	accuracy_top-1: 72.3529, accuracy_top-5: 97.6471
2024-03-04 00:07:21,116 - mmcls - INFO - Epoch [37][100/169]	lr: 1.000e-01, eta: 0:10:04, time: 0.094, data_time: 0.027, memory: 984, loss: 1.8860
2024-03-04 00:07:25,757 - mmcls - INFO - Saving checkpoint at 37 epochs
2024-03-04 00:07:28,272 - mmcls - INFO - Epoch(val) [37][22]	accuracy_top-1: 61.7647, accuracy_top-5: 94.7059
2024-03-04 00:07:37,848 - mmcls - INFO - Epoch [38][100/169]	lr: 1.000e-01, eta: 0:09:54, time: 0.096, data_time: 0.028, memory: 984, loss: 1.9531
2024-03-04 00:07:42,790 - mmcls - INFO - Saving checkpoint at 38 epochs
2024-03-04 00:07:45,221 - mmcls - INFO - Epoch(val) [38][22]	accuracy_top-1: 73.5294, accuracy_top-5: 98.2353
2024-03-04 00:07:54,281 - mmcls - INFO - Epoch [39][100/169]	lr: 1.000e-01, eta: 0:09:44, time: 0.090, data_time: 0.026, memory: 984, loss: 1.8338
2024-03-04 00:07:59,269 - mmcls - INFO - Saving checkpoint at 39 epochs
2024-03-04 00:08:01,782 - mmcls - INFO - Epoch(val) [39][22]	accuracy_top-1: 70.5882, accuracy_top-5: 99.4118
2024-03-04 00:08:11,971 - mmcls - INFO - Epoch [40][100/169]	lr: 1.000e-01, eta: 0:09:35, time: 0.102, data_time: 0.028, memory: 984, loss: 1.8791
2024-03-04 00:08:17,707 - mmcls - INFO - Saving checkpoint at 40 epochs
2024-03-04 00:08:20,228 - mmcls - INFO - Epoch(val) [40][22]	accuracy_top-1: 78.2353, accuracy_top-5: 98.8235
2024-03-04 00:08:29,148 - mmcls - INFO - Epoch [41][100/169]	lr: 1.000e-01, eta: 0:09:25, time: 0.089, data_time: 0.026, memory: 984, loss: 1.7959
2024-03-04 00:08:33,833 - mmcls - INFO - Saving checkpoint at 41 epochs
2024-03-04 00:08:36,269 - mmcls - INFO - Epoch(val) [41][22]	accuracy_top-1: 72.9412, accuracy_top-5: 98.2353
2024-03-04 00:08:45,449 - mmcls - INFO - Epoch [42][100/169]	lr: 1.000e-01, eta: 0:09:15, time: 0.092, data_time: 0.027, memory: 984, loss: 1.7760
2024-03-04 00:08:50,309 - mmcls - INFO - Saving checkpoint at 42 epochs
2024-03-04 00:08:52,840 - mmcls - INFO - Epoch(val) [42][22]	accuracy_top-1: 71.7647, accuracy_top-5: 97.6471
2024-03-04 00:09:01,857 - mmcls - INFO - Epoch [43][100/169]	lr: 1.000e-01, eta: 0:09:05, time: 0.090, data_time: 0.026, memory: 984, loss: 1.7696
2024-03-04 00:09:06,563 - mmcls - INFO - Saving checkpoint at 43 epochs
2024-03-04 00:09:08,960 - mmcls - INFO - Epoch(val) [43][22]	accuracy_top-1: 80.0000, accuracy_top-5: 98.8235
2024-03-04 00:09:18,126 - mmcls - INFO - Epoch [44][100/169]	lr: 1.000e-01, eta: 0:08:55, time: 0.092, data_time: 0.027, memory: 984, loss: 1.9008
2024-03-04 00:09:22,712 - mmcls - INFO - Saving checkpoint at 44 epochs
2024-03-04 00:09:25,073 - mmcls - INFO - Epoch(val) [44][22]	accuracy_top-1: 73.5294, accuracy_top-5: 97.6471
2024-03-04 00:09:34,196 - mmcls - INFO - Epoch [45][100/169]	lr: 1.000e-01, eta: 0:08:45, time: 0.091, data_time: 0.027, memory: 984, loss: 1.7653
2024-03-04 00:09:39,324 - mmcls - INFO - Saving checkpoint at 45 epochs
2024-03-04 00:09:41,858 - mmcls - INFO - Epoch(val) [45][22]	accuracy_top-1: 73.5294, accuracy_top-5: 98.2353
2024-03-04 00:09:51,469 - mmcls - INFO - Epoch [46][100/169]	lr: 1.000e-01, eta: 0:08:35, time: 0.096, data_time: 0.027, memory: 984, loss: 1.8673
2024-03-04 00:09:56,590 - mmcls - INFO - Saving checkpoint at 46 epochs
2024-03-04 00:09:59,059 - mmcls - INFO - Epoch(val) [46][22]	accuracy_top-1: 78.2353, accuracy_top-5: 97.6471
2024-03-04 00:10:08,660 - mmcls - INFO - Epoch [47][100/169]	lr: 1.000e-01, eta: 0:08:26, time: 0.096, data_time: 0.027, memory: 984, loss: 1.7801
2024-03-04 00:10:13,743 - mmcls - INFO - Saving checkpoint at 47 epochs
2024-03-04 00:10:16,177 - mmcls - INFO - Epoch(val) [47][22]	accuracy_top-1: 78.8235, accuracy_top-5: 95.2941
2024-03-04 00:10:25,753 - mmcls - INFO - Epoch [48][100/169]	lr: 1.000e-01, eta: 0:08:17, time: 0.096, data_time: 0.028, memory: 984, loss: 1.8043
2024-03-04 00:10:30,711 - mmcls - INFO - Saving checkpoint at 48 epochs
2024-03-04 00:10:33,220 - mmcls - INFO - Epoch(val) [48][22]	accuracy_top-1: 79.4118, accuracy_top-5: 98.8235
2024-03-04 00:10:42,715 - mmcls - INFO - Epoch [49][100/169]	lr: 1.000e-01, eta: 0:08:07, time: 0.095, data_time: 0.027, memory: 984, loss: 1.8119
2024-03-04 00:10:47,485 - mmcls - INFO - Saving checkpoint at 49 epochs
2024-03-04 00:10:50,008 - mmcls - INFO - Epoch(val) [49][22]	accuracy_top-1: 77.0588, accuracy_top-5: 98.2353
2024-03-04 00:10:59,594 - mmcls - INFO - Epoch [50][100/169]	lr: 1.000e-01, eta: 0:07:58, time: 0.096, data_time: 0.027, memory: 984, loss: 1.7554
2024-03-04 00:11:04,375 - mmcls - INFO - Saving checkpoint at 50 epochs
2024-03-04 00:11:06,829 - mmcls - INFO - Epoch(val) [50][22]	accuracy_top-1: 79.4118, accuracy_top-5: 98.2353
2024-03-04 00:11:16,309 - mmcls - INFO - Epoch [51][100/169]	lr: 1.000e-01, eta: 0:07:48, time: 0.095, data_time: 0.027, memory: 984, loss: 1.6837
2024-03-04 00:11:21,249 - mmcls - INFO - Saving checkpoint at 51 epochs
2024-03-04 00:11:23,682 - mmcls - INFO - Epoch(val) [51][22]	accuracy_top-1: 82.3529, accuracy_top-5: 98.8235
2024-03-04 00:11:33,053 - mmcls - INFO - Epoch [52][100/169]	lr: 1.000e-01, eta: 0:07:39, time: 0.094, data_time: 0.027, memory: 984, loss: 1.8323
2024-03-04 00:11:37,860 - mmcls - INFO - Saving checkpoint at 52 epochs
2024-03-04 00:11:40,245 - mmcls - INFO - Epoch(val) [52][22]	accuracy_top-1: 79.4118, accuracy_top-5: 98.8235
2024-03-04 00:11:49,342 - mmcls - INFO - Epoch [53][100/169]	lr: 1.000e-01, eta: 0:07:29, time: 0.091, data_time: 0.027, memory: 984, loss: 1.7284
2024-03-04 00:11:54,249 - mmcls - INFO - Saving checkpoint at 53 epochs
2024-03-04 00:11:56,699 - mmcls - INFO - Epoch(val) [53][22]	accuracy_top-1: 78.2353, accuracy_top-5: 98.2353
2024-03-04 00:12:06,430 - mmcls - INFO - Epoch [54][100/169]	lr: 1.000e-01, eta: 0:07:20, time: 0.097, data_time: 0.028, memory: 984, loss: 1.6832
2024-03-04 00:12:11,753 - mmcls - INFO - Saving checkpoint at 54 epochs
2024-03-04 00:12:14,201 - mmcls - INFO - Epoch(val) [54][22]	accuracy_top-1: 81.1765, accuracy_top-5: 98.8235
2024-03-04 00:12:24,110 - mmcls - INFO - Epoch [55][100/169]	lr: 1.000e-01, eta: 0:07:10, time: 0.099, data_time: 0.028, memory: 984, loss: 1.7336
2024-03-04 00:12:29,086 - mmcls - INFO - Saving checkpoint at 55 epochs
2024-03-04 00:12:31,480 - mmcls - INFO - Epoch(val) [55][22]	accuracy_top-1: 78.8235, accuracy_top-5: 99.4118
2024-03-04 00:12:40,566 - mmcls - INFO - Epoch [56][100/169]	lr: 1.000e-01, eta: 0:07:01, time: 0.091, data_time: 0.027, memory: 984, loss: 1.7418
2024-03-04 00:12:45,578 - mmcls - INFO - Saving checkpoint at 56 epochs
2024-03-04 00:12:48,006 - mmcls - INFO - Epoch(val) [56][22]	accuracy_top-1: 62.3529, accuracy_top-5: 97.0588
2024-03-04 00:12:56,586 - mmcls - INFO - Epoch [57][100/169]	lr: 1.000e-01, eta: 0:06:50, time: 0.086, data_time: 0.026, memory: 984, loss: 1.7411
2024-03-04 00:13:01,365 - mmcls - INFO - Saving checkpoint at 57 epochs
2024-03-04 00:13:03,809 - mmcls - INFO - Epoch(val) [57][22]	accuracy_top-1: 79.4118, accuracy_top-5: 97.6471
2024-03-04 00:13:13,644 - mmcls - INFO - Epoch [58][100/169]	lr: 1.000e-01, eta: 0:06:41, time: 0.098, data_time: 0.028, memory: 984, loss: 1.7484
2024-03-04 00:13:19,272 - mmcls - INFO - Saving checkpoint at 58 epochs
2024-03-04 00:13:21,772 - mmcls - INFO - Epoch(val) [58][22]	accuracy_top-1: 78.8235, accuracy_top-5: 97.6471
2024-03-04 00:13:30,704 - mmcls - INFO - Epoch [59][100/169]	lr: 1.000e-01, eta: 0:06:31, time: 0.089, data_time: 0.026, memory: 984, loss: 1.7419
2024-03-04 00:13:35,329 - mmcls - INFO - Saving checkpoint at 59 epochs
2024-03-04 00:13:37,797 - mmcls - INFO - Epoch(val) [59][22]	accuracy_top-1: 80.0000, accuracy_top-5: 98.2353
2024-03-04 00:13:47,259 - mmcls - INFO - Epoch [60][100/169]	lr: 1.000e-01, eta: 0:06:22, time: 0.095, data_time: 0.027, memory: 984, loss: 1.8117
2024-03-04 00:13:52,056 - mmcls - INFO - Saving checkpoint at 60 epochs
2024-03-04 00:13:54,604 - mmcls - INFO - Epoch(val) [60][22]	accuracy_top-1: 78.2353, accuracy_top-5: 99.4118
2024-03-04 00:14:04,387 - mmcls - INFO - Epoch [61][100/169]	lr: 1.000e-01, eta: 0:06:13, time: 0.098, data_time: 0.027, memory: 984, loss: 1.8039
2024-03-04 00:14:08,861 - mmcls - INFO - Saving checkpoint at 61 epochs
2024-03-04 00:14:11,203 - mmcls - INFO - Epoch(val) [61][22]	accuracy_top-1: 79.4118, accuracy_top-5: 95.8824
2024-03-04 00:14:20,488 - mmcls - INFO - Epoch [62][100/169]	lr: 1.000e-01, eta: 0:06:03, time: 0.093, data_time: 0.028, memory: 984, loss: 1.7543
2024-03-04 00:14:25,079 - mmcls - INFO - Saving checkpoint at 62 epochs
2024-03-04 00:14:27,418 - mmcls - INFO - Epoch(val) [62][22]	accuracy_top-1: 84.7059, accuracy_top-5: 99.4118
2024-03-04 00:14:36,546 - mmcls - INFO - Epoch [63][100/169]	lr: 1.000e-01, eta: 0:05:53, time: 0.091, data_time: 0.026, memory: 984, loss: 1.7391
2024-03-04 00:14:41,349 - mmcls - INFO - Saving checkpoint at 63 epochs
2024-03-04 00:14:43,993 - mmcls - INFO - Epoch(val) [63][22]	accuracy_top-1: 78.8235, accuracy_top-5: 98.8235
2024-03-04 00:14:53,129 - mmcls - INFO - Epoch [64][100/169]	lr: 1.000e-01, eta: 0:05:44, time: 0.091, data_time: 0.027, memory: 984, loss: 1.7032
2024-03-04 00:14:57,871 - mmcls - INFO - Saving checkpoint at 64 epochs
2024-03-04 00:15:00,392 - mmcls - INFO - Epoch(val) [64][22]	accuracy_top-1: 81.1765, accuracy_top-5: 98.2353
2024-03-04 00:15:09,687 - mmcls - INFO - Epoch [65][100/169]	lr: 1.000e-01, eta: 0:05:34, time: 0.093, data_time: 0.027, memory: 984, loss: 1.7156
2024-03-04 00:15:14,530 - mmcls - INFO - Saving checkpoint at 65 epochs
2024-03-04 00:15:17,002 - mmcls - INFO - Epoch(val) [65][22]	accuracy_top-1: 74.7059, accuracy_top-5: 98.8235
2024-03-04 00:15:26,285 - mmcls - INFO - Epoch [66][100/169]	lr: 1.000e-01, eta: 0:05:25, time: 0.093, data_time: 0.027, memory: 984, loss: 1.6818
2024-03-04 00:15:31,731 - mmcls - INFO - Saving checkpoint at 66 epochs
2024-03-04 00:15:34,038 - mmcls - INFO - Epoch(val) [66][22]	accuracy_top-1: 82.3529, accuracy_top-5: 100.0000
2024-03-04 00:15:43,879 - mmcls - INFO - Epoch [67][100/169]	lr: 1.000e-01, eta: 0:05:15, time: 0.098, data_time: 0.028, memory: 984, loss: 1.7025
2024-03-04 00:15:49,077 - mmcls - INFO - Saving checkpoint at 67 epochs
2024-03-04 00:15:51,641 - mmcls - INFO - Epoch(val) [67][22]	accuracy_top-1: 79.4118, accuracy_top-5: 98.8235
2024-03-04 00:16:01,958 - mmcls - INFO - Epoch [68][100/169]	lr: 1.000e-01, eta: 0:05:06, time: 0.103, data_time: 0.028, memory: 984, loss: 1.6703
2024-03-04 00:16:06,921 - mmcls - INFO - Saving checkpoint at 68 epochs
2024-03-04 00:16:09,410 - mmcls - INFO - Epoch(val) [68][22]	accuracy_top-1: 79.4118, accuracy_top-5: 98.2353
2024-03-04 00:16:18,766 - mmcls - INFO - Epoch [69][100/169]	lr: 1.000e-01, eta: 0:04:57, time: 0.093, data_time: 0.027, memory: 984, loss: 1.7235
2024-03-04 00:16:23,371 - mmcls - INFO - Saving checkpoint at 69 epochs
2024-03-04 00:16:25,812 - mmcls - INFO - Epoch(val) [69][22]	accuracy_top-1: 78.2353, accuracy_top-5: 98.2353
2024-03-04 00:16:35,085 - mmcls - INFO - Epoch [70][100/169]	lr: 1.000e-01, eta: 0:04:47, time: 0.093, data_time: 0.027, memory: 984, loss: 1.7449
2024-03-04 00:16:39,994 - mmcls - INFO - Saving checkpoint at 70 epochs
2024-03-04 00:16:42,522 - mmcls - INFO - Epoch(val) [70][22]	accuracy_top-1: 81.1765, accuracy_top-5: 99.4118
2024-03-04 00:16:51,865 - mmcls - INFO - Epoch [71][100/169]	lr: 1.000e-01, eta: 0:04:38, time: 0.093, data_time: 0.026, memory: 984, loss: 1.6440
2024-03-04 00:16:56,971 - mmcls - INFO - Saving checkpoint at 71 epochs
2024-03-04 00:16:59,583 - mmcls - INFO - Epoch(val) [71][22]	accuracy_top-1: 82.3529, accuracy_top-5: 99.4118
2024-03-04 00:17:09,024 - mmcls - INFO - Epoch [72][100/169]	lr: 1.000e-01, eta: 0:04:28, time: 0.094, data_time: 0.028, memory: 984, loss: 1.6889
2024-03-04 00:17:14,119 - mmcls - INFO - Saving checkpoint at 72 epochs
2024-03-04 00:17:16,590 - mmcls - INFO - Epoch(val) [72][22]	accuracy_top-1: 77.6471, accuracy_top-5: 97.0588
2024-03-04 00:17:26,247 - mmcls - INFO - Epoch [73][100/169]	lr: 1.000e-01, eta: 0:04:19, time: 0.096, data_time: 0.028, memory: 984, loss: 1.7049
2024-03-04 00:17:31,371 - mmcls - INFO - Saving checkpoint at 73 epochs
2024-03-04 00:17:33,918 - mmcls - INFO - Epoch(val) [73][22]	accuracy_top-1: 88.2353, accuracy_top-5: 99.4118
2024-03-04 00:17:43,332 - mmcls - INFO - Epoch [74][100/169]	lr: 1.000e-01, eta: 0:04:09, time: 0.094, data_time: 0.027, memory: 984, loss: 1.6853
2024-03-04 00:17:48,331 - mmcls - INFO - Saving checkpoint at 74 epochs
2024-03-04 00:17:50,795 - mmcls - INFO - Epoch(val) [74][22]	accuracy_top-1: 87.6471, accuracy_top-5: 99.4118
2024-03-04 00:18:00,402 - mmcls - INFO - Epoch [75][100/169]	lr: 1.000e-01, eta: 0:04:00, time: 0.096, data_time: 0.028, memory: 984, loss: 1.6166
2024-03-04 00:18:05,754 - mmcls - INFO - Saving checkpoint at 75 epochs
2024-03-04 00:18:08,213 - mmcls - INFO - Epoch(val) [75][22]	accuracy_top-1: 78.2353, accuracy_top-5: 98.8235
2024-03-04 00:18:18,387 - mmcls - INFO - Epoch [76][100/169]	lr: 1.000e-01, eta: 0:03:51, time: 0.102, data_time: 0.028, memory: 984, loss: 1.6738
2024-03-04 00:18:22,998 - mmcls - INFO - Saving checkpoint at 76 epochs
2024-03-04 00:18:25,369 - mmcls - INFO - Epoch(val) [76][22]	accuracy_top-1: 82.3529, accuracy_top-5: 99.4118
2024-03-04 00:18:34,613 - mmcls - INFO - Epoch [77][100/169]	lr: 1.000e-01, eta: 0:03:41, time: 0.092, data_time: 0.027, memory: 984, loss: 1.6784
2024-03-04 00:18:39,616 - mmcls - INFO - Saving checkpoint at 77 epochs
2024-03-04 00:18:42,143 - mmcls - INFO - Epoch(val) [77][22]	accuracy_top-1: 81.1765, accuracy_top-5: 98.8235
2024-03-04 00:18:51,577 - mmcls - INFO - Epoch [78][100/169]	lr: 1.000e-01, eta: 0:03:32, time: 0.094, data_time: 0.027, memory: 984, loss: 1.6478
2024-03-04 00:18:56,723 - mmcls - INFO - Saving checkpoint at 78 epochs
2024-03-04 00:18:59,193 - mmcls - INFO - Epoch(val) [78][22]	accuracy_top-1: 77.6471, accuracy_top-5: 100.0000
2024-03-04 00:19:08,820 - mmcls - INFO - Epoch [79][100/169]	lr: 1.000e-01, eta: 0:03:22, time: 0.096, data_time: 0.028, memory: 984, loss: 1.6616
2024-03-04 00:19:13,699 - mmcls - INFO - Saving checkpoint at 79 epochs
2024-03-04 00:19:16,133 - mmcls - INFO - Epoch(val) [79][22]	accuracy_top-1: 77.0588, accuracy_top-5: 98.8235
2024-03-04 00:19:25,591 - mmcls - INFO - Epoch [80][100/169]	lr: 1.000e-01, eta: 0:03:13, time: 0.094, data_time: 0.027, memory: 984, loss: 1.7139
2024-03-04 00:19:30,435 - mmcls - INFO - Saving checkpoint at 80 epochs
2024-03-04 00:19:32,966 - mmcls - INFO - Epoch(val) [80][22]	accuracy_top-1: 78.8235, accuracy_top-5: 97.6471
2024-03-04 00:19:42,330 - mmcls - INFO - Epoch [81][100/169]	lr: 1.000e-01, eta: 0:03:03, time: 0.094, data_time: 0.027, memory: 984, loss: 1.6017
2024-03-04 00:19:46,957 - mmcls - INFO - Saving checkpoint at 81 epochs
2024-03-04 00:19:49,336 - mmcls - INFO - Epoch(val) [81][22]	accuracy_top-1: 80.5882, accuracy_top-5: 97.0588
2024-03-04 00:19:59,402 - mmcls - INFO - Epoch [82][100/169]	lr: 1.000e-01, eta: 0:02:54, time: 0.101, data_time: 0.028, memory: 984, loss: 1.6229
2024-03-04 00:20:04,437 - mmcls - INFO - Saving checkpoint at 82 epochs
2024-03-04 00:20:06,797 - mmcls - INFO - Epoch(val) [82][22]	accuracy_top-1: 83.5294, accuracy_top-5: 100.0000
2024-03-04 00:20:16,848 - mmcls - INFO - Epoch [83][100/169]	lr: 1.000e-01, eta: 0:02:45, time: 0.100, data_time: 0.027, memory: 984, loss: 1.6343
2024-03-04 00:20:21,318 - mmcls - INFO - Saving checkpoint at 83 epochs
2024-03-04 00:20:23,660 - mmcls - INFO - Epoch(val) [83][22]	accuracy_top-1: 88.8235, accuracy_top-5: 98.8235
2024-03-04 00:20:33,503 - mmcls - INFO - Epoch [84][100/169]	lr: 1.000e-01, eta: 0:02:35, time: 0.098, data_time: 0.028, memory: 984, loss: 1.6577
2024-03-04 00:20:38,502 - mmcls - INFO - Saving checkpoint at 84 epochs
2024-03-04 00:20:40,980 - mmcls - INFO - Epoch(val) [84][22]	accuracy_top-1: 87.0588, accuracy_top-5: 99.4118
2024-03-04 00:20:50,400 - mmcls - INFO - Epoch [85][100/169]	lr: 1.000e-01, eta: 0:02:26, time: 0.094, data_time: 0.027, memory: 984, loss: 1.6248
2024-03-04 00:20:55,577 - mmcls - INFO - Saving checkpoint at 85 epochs
2024-03-04 00:20:58,087 - mmcls - INFO - Epoch(val) [85][22]	accuracy_top-1: 80.0000, accuracy_top-5: 97.6471
2024-03-04 00:21:07,572 - mmcls - INFO - Epoch [86][100/169]	lr: 1.000e-01, eta: 0:02:16, time: 0.095, data_time: 0.027, memory: 984, loss: 1.6068
2024-03-04 00:21:12,501 - mmcls - INFO - Saving checkpoint at 86 epochs
2024-03-04 00:21:14,972 - mmcls - INFO - Epoch(val) [86][22]	accuracy_top-1: 85.2941, accuracy_top-5: 99.4118
2024-03-04 00:21:24,321 - mmcls - INFO - Epoch [87][100/169]	lr: 1.000e-01, eta: 0:02:07, time: 0.093, data_time: 0.027, memory: 984, loss: 1.5541
2024-03-04 00:21:29,026 - mmcls - INFO - Saving checkpoint at 87 epochs
2024-03-04 00:21:31,778 - mmcls - INFO - Epoch(val) [87][22]	accuracy_top-1: 80.5882, accuracy_top-5: 98.8235
2024-03-04 00:21:41,010 - mmcls - INFO - Epoch [88][100/169]	lr: 1.000e-01, eta: 0:01:57, time: 0.092, data_time: 0.027, memory: 984, loss: 1.6536
2024-03-04 00:21:45,883 - mmcls - INFO - Saving checkpoint at 88 epochs
2024-03-04 00:21:48,432 - mmcls - INFO - Epoch(val) [88][22]	accuracy_top-1: 78.8235, accuracy_top-5: 97.0588
2024-03-04 00:21:57,773 - mmcls - INFO - Epoch [89][100/169]	lr: 1.000e-01, eta: 0:01:48, time: 0.093, data_time: 0.027, memory: 984, loss: 1.5720
2024-03-04 00:22:02,485 - mmcls - INFO - Saving checkpoint at 89 epochs
2024-03-04 00:22:05,580 - mmcls - INFO - Epoch(val) [89][22]	accuracy_top-1: 87.0588, accuracy_top-5: 99.4118
2024-03-04 00:22:15,460 - mmcls - INFO - Epoch [90][100/169]	lr: 1.000e-01, eta: 0:01:38, time: 0.099, data_time: 0.027, memory: 984, loss: 1.6524
2024-03-04 00:22:20,366 - mmcls - INFO - Saving checkpoint at 90 epochs
2024-03-04 00:22:23,037 - mmcls - INFO - Epoch(val) [90][22]	accuracy_top-1: 82.9412, accuracy_top-5: 99.4118
2024-03-04 00:22:32,444 - mmcls - INFO - Epoch [91][100/169]	lr: 1.000e-01, eta: 0:01:29, time: 0.094, data_time: 0.028, memory: 984, loss: 1.5951
2024-03-04 00:22:37,728 - mmcls - INFO - Saving checkpoint at 91 epochs
2024-03-04 00:22:40,644 - mmcls - INFO - Epoch(val) [91][22]	accuracy_top-1: 84.1176, accuracy_top-5: 99.4118
2024-03-04 00:22:49,969 - mmcls - INFO - Epoch [92][100/169]	lr: 1.000e-01, eta: 0:01:19, time: 0.093, data_time: 0.027, memory: 984, loss: 1.5802
2024-03-04 00:22:54,995 - mmcls - INFO - Saving checkpoint at 92 epochs
2024-03-04 00:22:57,488 - mmcls - INFO - Epoch(val) [92][22]	accuracy_top-1: 83.5294, accuracy_top-5: 98.8235
2024-03-04 00:23:06,836 - mmcls - INFO - Epoch [93][100/169]	lr: 1.000e-01, eta: 0:01:10, time: 0.093, data_time: 0.027, memory: 984, loss: 1.6682
2024-03-04 00:23:11,442 - mmcls - INFO - Saving checkpoint at 93 epochs
2024-03-04 00:23:13,928 - mmcls - INFO - Epoch(val) [93][22]	accuracy_top-1: 83.5294, accuracy_top-5: 99.4118
2024-03-04 00:23:23,445 - mmcls - INFO - Epoch [94][100/169]	lr: 1.000e-01, eta: 0:01:00, time: 0.095, data_time: 0.028, memory: 984, loss: 1.5840
2024-03-04 00:23:28,207 - mmcls - INFO - Saving checkpoint at 94 epochs
2024-03-04 00:23:30,688 - mmcls - INFO - Epoch(val) [94][22]	accuracy_top-1: 80.5882, accuracy_top-5: 99.4118
2024-03-04 00:23:39,847 - mmcls - INFO - Epoch [95][100/169]	lr: 1.000e-01, eta: 0:00:51, time: 0.091, data_time: 0.026, memory: 984, loss: 1.6217
2024-03-04 00:23:44,542 - mmcls - INFO - Saving checkpoint at 95 epochs
2024-03-04 00:23:47,053 - mmcls - INFO - Epoch(val) [95][22]	accuracy_top-1: 88.2353, accuracy_top-5: 99.4118
2024-03-04 00:23:55,610 - mmcls - INFO - Epoch [96][100/169]	lr: 1.000e-01, eta: 0:00:41, time: 0.085, data_time: 0.026, memory: 984, loss: 1.5806
2024-03-04 00:24:00,277 - mmcls - INFO - Saving checkpoint at 96 epochs
2024-03-04 00:24:03,182 - mmcls - INFO - Epoch(val) [96][22]	accuracy_top-1: 84.1176, accuracy_top-5: 99.4118
2024-03-04 00:24:12,599 - mmcls - INFO - Epoch [97][100/169]	lr: 1.000e-01, eta: 0:00:32, time: 0.094, data_time: 0.027, memory: 984, loss: 1.6313
2024-03-04 00:24:17,485 - mmcls - INFO - Saving checkpoint at 97 epochs
2024-03-04 00:24:19,860 - mmcls - INFO - Epoch(val) [97][22]	accuracy_top-1: 82.3529, accuracy_top-5: 98.2353
2024-03-04 00:24:28,861 - mmcls - INFO - Epoch [98][100/169]	lr: 1.000e-01, eta: 0:00:22, time: 0.090, data_time: 0.026, memory: 984, loss: 1.6066
2024-03-04 00:24:33,499 - mmcls - INFO - Saving checkpoint at 98 epochs
2024-03-04 00:24:36,244 - mmcls - INFO - Epoch(val) [98][22]	accuracy_top-1: 88.2353, accuracy_top-5: 99.4118
2024-03-04 00:24:45,852 - mmcls - INFO - Epoch [99][100/169]	lr: 1.000e-01, eta: 0:00:13, time: 0.096, data_time: 0.028, memory: 984, loss: 1.5971
2024-03-04 00:24:50,962 - mmcls - INFO - Saving checkpoint at 99 epochs
2024-03-04 00:24:53,373 - mmcls - INFO - Epoch(val) [99][22]	accuracy_top-1: 90.0000, accuracy_top-5: 100.0000
2024-03-04 00:25:02,706 - mmcls - INFO - Epoch [100][100/169]	lr: 1.000e-01, eta: 0:00:03, time: 0.093, data_time: 0.027, memory: 984, loss: 1.6269
2024-03-04 00:25:07,403 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-03-04 00:25:09,882 - mmcls - INFO - Epoch(val) [100][22]	accuracy_top-1: 85.8824, accuracy_top-5: 99.4118
