2024-03-03 23:59:02,574 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: GCC 11.4
MMCV CUDA Compiler: 11.8
MMClassification: 0.15.0+2d2583a
------------------------------------------------------------

2024-03-03 23:59:02,575 - mmcls - INFO - Distributed training: False
2024-03-03 23:59:02,701 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=34,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=17,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=100)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/resnet34_b16x8_flowers'
gpu_ids = range(0, 1)

2024-03-03 23:59:03,094 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2024-03-03 23:59:03,516 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([17, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([17]): 
NormalInit: mean=0, std=0.01, bias=0 
2024-03-03 23:59:25,373 - mmcls - INFO - Start running, host: hzhao11@gpu2-comp-101, work_dir: /userhome/cs2/hzhao11/training/oxford-cnn/output/resnet34_b16x8_flowers
2024-03-03 23:59:25,373 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-03-03 23:59:25,373 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2024-03-03 23:59:25,374 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/hzhao11/training/oxford-cnn/output/resnet34_b16x8_flowers by HardDiskBackend.
2024-03-03 23:59:43,641 - mmcls - INFO - Saving checkpoint at 1 epochs
2024-03-03 23:59:46,867 - mmcls - INFO - Epoch(val) [1][6]	accuracy_top-1: 20.0000, accuracy_top-5: 71.1765
2024-03-03 23:59:58,312 - mmcls - INFO - Saving checkpoint at 2 epochs
2024-03-04 00:00:01,302 - mmcls - INFO - Epoch(val) [2][6]	accuracy_top-1: 43.5294, accuracy_top-5: 86.4706
2024-03-04 00:00:12,952 - mmcls - INFO - Saving checkpoint at 3 epochs
2024-03-04 00:00:15,611 - mmcls - INFO - Epoch(val) [3][6]	accuracy_top-1: 43.5294, accuracy_top-5: 91.7647
2024-03-04 00:00:26,496 - mmcls - INFO - Saving checkpoint at 4 epochs
2024-03-04 00:00:29,462 - mmcls - INFO - Epoch(val) [4][6]	accuracy_top-1: 45.8824, accuracy_top-5: 91.1765
2024-03-04 00:00:40,067 - mmcls - INFO - Saving checkpoint at 5 epochs
2024-03-04 00:00:42,428 - mmcls - INFO - Epoch(val) [5][6]	accuracy_top-1: 50.5882, accuracy_top-5: 94.1176
2024-03-04 00:00:52,993 - mmcls - INFO - Saving checkpoint at 6 epochs
2024-03-04 00:00:55,419 - mmcls - INFO - Epoch(val) [6][6]	accuracy_top-1: 56.4706, accuracy_top-5: 96.4706
2024-03-04 00:01:06,964 - mmcls - INFO - Saving checkpoint at 7 epochs
2024-03-04 00:01:09,348 - mmcls - INFO - Epoch(val) [7][6]	accuracy_top-1: 58.2353, accuracy_top-5: 95.8824
2024-03-04 00:01:20,067 - mmcls - INFO - Saving checkpoint at 8 epochs
2024-03-04 00:01:22,505 - mmcls - INFO - Epoch(val) [8][6]	accuracy_top-1: 47.6471, accuracy_top-5: 95.8824
2024-03-04 00:01:32,900 - mmcls - INFO - Saving checkpoint at 9 epochs
2024-03-04 00:01:35,330 - mmcls - INFO - Epoch(val) [9][6]	accuracy_top-1: 59.4118, accuracy_top-5: 97.6471
2024-03-04 00:01:46,101 - mmcls - INFO - Saving checkpoint at 10 epochs
2024-03-04 00:01:48,352 - mmcls - INFO - Epoch(val) [10][6]	accuracy_top-1: 62.9412, accuracy_top-5: 96.4706
2024-03-04 00:01:59,189 - mmcls - INFO - Saving checkpoint at 11 epochs
2024-03-04 00:02:01,795 - mmcls - INFO - Epoch(val) [11][6]	accuracy_top-1: 71.1765, accuracy_top-5: 97.0588
2024-03-04 00:02:12,703 - mmcls - INFO - Saving checkpoint at 12 epochs
2024-03-04 00:02:15,127 - mmcls - INFO - Epoch(val) [12][6]	accuracy_top-1: 64.7059, accuracy_top-5: 97.0588
2024-03-04 00:02:25,827 - mmcls - INFO - Saving checkpoint at 13 epochs
2024-03-04 00:02:28,274 - mmcls - INFO - Epoch(val) [13][6]	accuracy_top-1: 74.1176, accuracy_top-5: 97.6471
2024-03-04 00:02:39,012 - mmcls - INFO - Saving checkpoint at 14 epochs
2024-03-04 00:02:41,379 - mmcls - INFO - Epoch(val) [14][6]	accuracy_top-1: 65.2941, accuracy_top-5: 94.1176
2024-03-04 00:02:51,799 - mmcls - INFO - Saving checkpoint at 15 epochs
2024-03-04 00:02:54,077 - mmcls - INFO - Epoch(val) [15][6]	accuracy_top-1: 74.1176, accuracy_top-5: 97.6471
2024-03-04 00:03:04,551 - mmcls - INFO - Saving checkpoint at 16 epochs
2024-03-04 00:03:06,929 - mmcls - INFO - Epoch(val) [16][6]	accuracy_top-1: 68.2353, accuracy_top-5: 97.6471
2024-03-04 00:03:17,775 - mmcls - INFO - Saving checkpoint at 17 epochs
2024-03-04 00:03:20,399 - mmcls - INFO - Epoch(val) [17][6]	accuracy_top-1: 71.1765, accuracy_top-5: 96.4706
2024-03-04 00:03:30,806 - mmcls - INFO - Saving checkpoint at 18 epochs
2024-03-04 00:03:33,144 - mmcls - INFO - Epoch(val) [18][6]	accuracy_top-1: 74.7059, accuracy_top-5: 98.2353
2024-03-04 00:03:43,789 - mmcls - INFO - Saving checkpoint at 19 epochs
2024-03-04 00:03:46,137 - mmcls - INFO - Epoch(val) [19][6]	accuracy_top-1: 72.9412, accuracy_top-5: 98.8235
2024-03-04 00:03:56,833 - mmcls - INFO - Saving checkpoint at 20 epochs
2024-03-04 00:03:59,195 - mmcls - INFO - Epoch(val) [20][6]	accuracy_top-1: 76.4706, accuracy_top-5: 98.8235
2024-03-04 00:04:10,105 - mmcls - INFO - Saving checkpoint at 21 epochs
2024-03-04 00:04:12,514 - mmcls - INFO - Epoch(val) [21][6]	accuracy_top-1: 62.9412, accuracy_top-5: 92.9412
2024-03-04 00:04:23,251 - mmcls - INFO - Saving checkpoint at 22 epochs
2024-03-04 00:04:25,691 - mmcls - INFO - Epoch(val) [22][6]	accuracy_top-1: 75.2941, accuracy_top-5: 97.0588
2024-03-04 00:04:36,559 - mmcls - INFO - Saving checkpoint at 23 epochs
2024-03-04 00:04:39,125 - mmcls - INFO - Epoch(val) [23][6]	accuracy_top-1: 80.0000, accuracy_top-5: 98.2353
2024-03-04 00:04:50,129 - mmcls - INFO - Saving checkpoint at 24 epochs
2024-03-04 00:04:52,789 - mmcls - INFO - Epoch(val) [24][6]	accuracy_top-1: 83.5294, accuracy_top-5: 100.0000
2024-03-04 00:05:03,776 - mmcls - INFO - Saving checkpoint at 25 epochs
2024-03-04 00:05:06,066 - mmcls - INFO - Epoch(val) [25][6]	accuracy_top-1: 79.4118, accuracy_top-5: 98.2353
2024-03-04 00:05:16,671 - mmcls - INFO - Saving checkpoint at 26 epochs
2024-03-04 00:05:19,013 - mmcls - INFO - Epoch(val) [26][6]	accuracy_top-1: 75.8824, accuracy_top-5: 99.4118
2024-03-04 00:05:29,679 - mmcls - INFO - Saving checkpoint at 27 epochs
2024-03-04 00:05:32,013 - mmcls - INFO - Epoch(val) [27][6]	accuracy_top-1: 83.5294, accuracy_top-5: 99.4118
2024-03-04 00:05:43,193 - mmcls - INFO - Saving checkpoint at 28 epochs
2024-03-04 00:05:45,634 - mmcls - INFO - Epoch(val) [28][6]	accuracy_top-1: 76.4706, accuracy_top-5: 98.8235
2024-03-04 00:05:56,516 - mmcls - INFO - Saving checkpoint at 29 epochs
2024-03-04 00:05:58,855 - mmcls - INFO - Epoch(val) [29][6]	accuracy_top-1: 83.5294, accuracy_top-5: 98.2353
2024-03-04 00:06:09,809 - mmcls - INFO - Saving checkpoint at 30 epochs
2024-03-04 00:06:12,140 - mmcls - INFO - Epoch(val) [30][6]	accuracy_top-1: 85.2941, accuracy_top-5: 99.4118
2024-03-04 00:06:22,839 - mmcls - INFO - Saving checkpoint at 31 epochs
2024-03-04 00:06:25,364 - mmcls - INFO - Epoch(val) [31][6]	accuracy_top-1: 78.8235, accuracy_top-5: 98.8235
2024-03-04 00:06:36,054 - mmcls - INFO - Saving checkpoint at 32 epochs
2024-03-04 00:06:38,436 - mmcls - INFO - Epoch(val) [32][6]	accuracy_top-1: 74.7059, accuracy_top-5: 98.2353
2024-03-04 00:06:49,051 - mmcls - INFO - Saving checkpoint at 33 epochs
2024-03-04 00:06:51,369 - mmcls - INFO - Epoch(val) [33][6]	accuracy_top-1: 85.8824, accuracy_top-5: 99.4118
2024-03-04 00:07:02,355 - mmcls - INFO - Saving checkpoint at 34 epochs
2024-03-04 00:07:04,870 - mmcls - INFO - Epoch(val) [34][6]	accuracy_top-1: 84.1176, accuracy_top-5: 99.4118
2024-03-04 00:07:15,656 - mmcls - INFO - Saving checkpoint at 35 epochs
2024-03-04 00:07:18,255 - mmcls - INFO - Epoch(val) [35][6]	accuracy_top-1: 85.2941, accuracy_top-5: 98.8235
2024-03-04 00:07:29,119 - mmcls - INFO - Saving checkpoint at 36 epochs
2024-03-04 00:07:31,683 - mmcls - INFO - Epoch(val) [36][6]	accuracy_top-1: 81.1765, accuracy_top-5: 99.4118
2024-03-04 00:07:42,296 - mmcls - INFO - Saving checkpoint at 37 epochs
2024-03-04 00:07:44,874 - mmcls - INFO - Epoch(val) [37][6]	accuracy_top-1: 84.7059, accuracy_top-5: 99.4118
2024-03-04 00:07:55,374 - mmcls - INFO - Saving checkpoint at 38 epochs
2024-03-04 00:07:57,966 - mmcls - INFO - Epoch(val) [38][6]	accuracy_top-1: 86.4706, accuracy_top-5: 99.4118
2024-03-04 00:08:08,908 - mmcls - INFO - Saving checkpoint at 39 epochs
2024-03-04 00:08:11,323 - mmcls - INFO - Epoch(val) [39][6]	accuracy_top-1: 86.4706, accuracy_top-5: 99.4118
2024-03-04 00:08:22,589 - mmcls - INFO - Saving checkpoint at 40 epochs
2024-03-04 00:08:24,952 - mmcls - INFO - Epoch(val) [40][6]	accuracy_top-1: 87.6471, accuracy_top-5: 100.0000
2024-03-04 00:08:36,438 - mmcls - INFO - Saving checkpoint at 41 epochs
2024-03-04 00:08:38,725 - mmcls - INFO - Epoch(val) [41][6]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-03-04 00:08:49,244 - mmcls - INFO - Saving checkpoint at 42 epochs
2024-03-04 00:08:51,740 - mmcls - INFO - Epoch(val) [42][6]	accuracy_top-1: 85.8824, accuracy_top-5: 98.8235
2024-03-04 00:09:02,375 - mmcls - INFO - Saving checkpoint at 43 epochs
2024-03-04 00:09:04,740 - mmcls - INFO - Epoch(val) [43][6]	accuracy_top-1: 77.0588, accuracy_top-5: 97.6471
2024-03-04 00:09:15,556 - mmcls - INFO - Saving checkpoint at 44 epochs
2024-03-04 00:09:17,797 - mmcls - INFO - Epoch(val) [44][6]	accuracy_top-1: 88.8235, accuracy_top-5: 99.4118
2024-03-04 00:09:28,414 - mmcls - INFO - Saving checkpoint at 45 epochs
2024-03-04 00:09:30,762 - mmcls - INFO - Epoch(val) [45][6]	accuracy_top-1: 88.8235, accuracy_top-5: 98.8235
2024-03-04 00:09:41,400 - mmcls - INFO - Saving checkpoint at 46 epochs
2024-03-04 00:09:43,688 - mmcls - INFO - Epoch(val) [46][6]	accuracy_top-1: 90.0000, accuracy_top-5: 100.0000
2024-03-04 00:09:55,055 - mmcls - INFO - Saving checkpoint at 47 epochs
2024-03-04 00:09:57,419 - mmcls - INFO - Epoch(val) [47][6]	accuracy_top-1: 85.8824, accuracy_top-5: 99.4118
2024-03-04 00:10:08,741 - mmcls - INFO - Saving checkpoint at 48 epochs
2024-03-04 00:10:11,094 - mmcls - INFO - Epoch(val) [48][6]	accuracy_top-1: 89.4118, accuracy_top-5: 99.4118
2024-03-04 00:10:22,257 - mmcls - INFO - Saving checkpoint at 49 epochs
2024-03-04 00:10:24,868 - mmcls - INFO - Epoch(val) [49][6]	accuracy_top-1: 91.7647, accuracy_top-5: 99.4118
2024-03-04 00:10:35,916 - mmcls - INFO - Saving checkpoint at 50 epochs
2024-03-04 00:10:38,378 - mmcls - INFO - Epoch(val) [50][6]	accuracy_top-1: 85.2941, accuracy_top-5: 99.4118
2024-03-04 00:10:49,226 - mmcls - INFO - Saving checkpoint at 51 epochs
2024-03-04 00:10:51,890 - mmcls - INFO - Epoch(val) [51][6]	accuracy_top-1: 92.3529, accuracy_top-5: 99.4118
2024-03-04 00:11:02,852 - mmcls - INFO - Saving checkpoint at 52 epochs
2024-03-04 00:11:05,254 - mmcls - INFO - Epoch(val) [52][6]	accuracy_top-1: 91.7647, accuracy_top-5: 99.4118
2024-03-04 00:11:16,322 - mmcls - INFO - Saving checkpoint at 53 epochs
2024-03-04 00:11:18,909 - mmcls - INFO - Epoch(val) [53][6]	accuracy_top-1: 82.9412, accuracy_top-5: 98.2353
2024-03-04 00:11:29,957 - mmcls - INFO - Saving checkpoint at 54 epochs
2024-03-04 00:11:32,331 - mmcls - INFO - Epoch(val) [54][6]	accuracy_top-1: 81.1765, accuracy_top-5: 98.8235
2024-03-04 00:11:43,724 - mmcls - INFO - Saving checkpoint at 55 epochs
2024-03-04 00:11:46,077 - mmcls - INFO - Epoch(val) [55][6]	accuracy_top-1: 84.7059, accuracy_top-5: 98.2353
2024-03-04 00:11:57,025 - mmcls - INFO - Saving checkpoint at 56 epochs
2024-03-04 00:11:59,325 - mmcls - INFO - Epoch(val) [56][6]	accuracy_top-1: 92.3529, accuracy_top-5: 100.0000
2024-03-04 00:12:10,036 - mmcls - INFO - Saving checkpoint at 57 epochs
2024-03-04 00:12:12,490 - mmcls - INFO - Epoch(val) [57][6]	accuracy_top-1: 92.9412, accuracy_top-5: 99.4118
2024-03-04 00:12:22,890 - mmcls - INFO - Saving checkpoint at 58 epochs
2024-03-04 00:12:25,396 - mmcls - INFO - Epoch(val) [58][6]	accuracy_top-1: 90.5882, accuracy_top-5: 100.0000
2024-03-04 00:12:36,388 - mmcls - INFO - Saving checkpoint at 59 epochs
2024-03-04 00:12:38,834 - mmcls - INFO - Epoch(val) [59][6]	accuracy_top-1: 88.2353, accuracy_top-5: 99.4118
2024-03-04 00:12:49,530 - mmcls - INFO - Saving checkpoint at 60 epochs
2024-03-04 00:12:52,332 - mmcls - INFO - Epoch(val) [60][6]	accuracy_top-1: 90.0000, accuracy_top-5: 99.4118
2024-03-04 00:13:02,945 - mmcls - INFO - Saving checkpoint at 61 epochs
2024-03-04 00:13:05,446 - mmcls - INFO - Epoch(val) [61][6]	accuracy_top-1: 93.5294, accuracy_top-5: 100.0000
2024-03-04 00:13:15,939 - mmcls - INFO - Saving checkpoint at 62 epochs
2024-03-04 00:13:18,873 - mmcls - INFO - Epoch(val) [62][6]	accuracy_top-1: 85.2941, accuracy_top-5: 98.8235
2024-03-04 00:13:29,422 - mmcls - INFO - Saving checkpoint at 63 epochs
2024-03-04 00:13:31,879 - mmcls - INFO - Epoch(val) [63][6]	accuracy_top-1: 92.3529, accuracy_top-5: 100.0000
2024-03-04 00:13:42,293 - mmcls - INFO - Saving checkpoint at 64 epochs
2024-03-04 00:13:44,823 - mmcls - INFO - Epoch(val) [64][6]	accuracy_top-1: 87.6471, accuracy_top-5: 99.4118
2024-03-04 00:13:55,904 - mmcls - INFO - Saving checkpoint at 65 epochs
2024-03-04 00:13:58,343 - mmcls - INFO - Epoch(val) [65][6]	accuracy_top-1: 93.5294, accuracy_top-5: 100.0000
2024-03-04 00:14:09,337 - mmcls - INFO - Saving checkpoint at 66 epochs
2024-03-04 00:14:12,156 - mmcls - INFO - Epoch(val) [66][6]	accuracy_top-1: 91.1765, accuracy_top-5: 100.0000
2024-03-04 00:14:22,798 - mmcls - INFO - Saving checkpoint at 67 epochs
2024-03-04 00:14:25,319 - mmcls - INFO - Epoch(val) [67][6]	accuracy_top-1: 86.4706, accuracy_top-5: 100.0000
2024-03-04 00:14:36,222 - mmcls - INFO - Saving checkpoint at 68 epochs
2024-03-04 00:14:38,679 - mmcls - INFO - Epoch(val) [68][6]	accuracy_top-1: 86.4706, accuracy_top-5: 100.0000
2024-03-04 00:14:49,430 - mmcls - INFO - Saving checkpoint at 69 epochs
2024-03-04 00:14:51,936 - mmcls - INFO - Epoch(val) [69][6]	accuracy_top-1: 92.3529, accuracy_top-5: 99.4118
2024-03-04 00:15:02,449 - mmcls - INFO - Saving checkpoint at 70 epochs
2024-03-04 00:15:04,961 - mmcls - INFO - Epoch(val) [70][6]	accuracy_top-1: 87.0588, accuracy_top-5: 99.4118
2024-03-04 00:15:15,739 - mmcls - INFO - Saving checkpoint at 71 epochs
2024-03-04 00:15:18,276 - mmcls - INFO - Epoch(val) [71][6]	accuracy_top-1: 93.5294, accuracy_top-5: 100.0000
2024-03-04 00:15:28,943 - mmcls - INFO - Saving checkpoint at 72 epochs
2024-03-04 00:15:31,687 - mmcls - INFO - Epoch(val) [72][6]	accuracy_top-1: 92.9412, accuracy_top-5: 99.4118
2024-03-04 00:15:42,483 - mmcls - INFO - Saving checkpoint at 73 epochs
2024-03-04 00:15:44,893 - mmcls - INFO - Epoch(val) [73][6]	accuracy_top-1: 91.1765, accuracy_top-5: 99.4118
2024-03-04 00:15:56,060 - mmcls - INFO - Saving checkpoint at 74 epochs
2024-03-04 00:15:58,486 - mmcls - INFO - Epoch(val) [74][6]	accuracy_top-1: 89.4118, accuracy_top-5: 99.4118
2024-03-04 00:16:09,101 - mmcls - INFO - Saving checkpoint at 75 epochs
2024-03-04 00:16:11,680 - mmcls - INFO - Epoch(val) [75][6]	accuracy_top-1: 91.7647, accuracy_top-5: 100.0000
2024-03-04 00:16:22,637 - mmcls - INFO - Saving checkpoint at 76 epochs
2024-03-04 00:16:25,067 - mmcls - INFO - Epoch(val) [76][6]	accuracy_top-1: 92.9412, accuracy_top-5: 99.4118
2024-03-04 00:16:35,927 - mmcls - INFO - Saving checkpoint at 77 epochs
2024-03-04 00:16:38,376 - mmcls - INFO - Epoch(val) [77][6]	accuracy_top-1: 94.1176, accuracy_top-5: 99.4118
2024-03-04 00:16:49,071 - mmcls - INFO - Saving checkpoint at 78 epochs
2024-03-04 00:16:51,804 - mmcls - INFO - Epoch(val) [78][6]	accuracy_top-1: 91.7647, accuracy_top-5: 99.4118
2024-03-04 00:17:02,632 - mmcls - INFO - Saving checkpoint at 79 epochs
2024-03-04 00:17:05,373 - mmcls - INFO - Epoch(val) [79][6]	accuracy_top-1: 91.7647, accuracy_top-5: 99.4118
2024-03-04 00:17:16,117 - mmcls - INFO - Saving checkpoint at 80 epochs
2024-03-04 00:17:18,556 - mmcls - INFO - Epoch(val) [80][6]	accuracy_top-1: 83.5294, accuracy_top-5: 98.8235
2024-03-04 00:17:29,420 - mmcls - INFO - Saving checkpoint at 81 epochs
2024-03-04 00:17:31,918 - mmcls - INFO - Epoch(val) [81][6]	accuracy_top-1: 87.6471, accuracy_top-5: 99.4118
2024-03-04 00:17:42,496 - mmcls - INFO - Saving checkpoint at 82 epochs
2024-03-04 00:17:44,918 - mmcls - INFO - Epoch(val) [82][6]	accuracy_top-1: 84.7059, accuracy_top-5: 99.4118
2024-03-04 00:17:55,636 - mmcls - INFO - Saving checkpoint at 83 epochs
2024-03-04 00:17:58,054 - mmcls - INFO - Epoch(val) [83][6]	accuracy_top-1: 94.7059, accuracy_top-5: 99.4118
2024-03-04 00:18:08,934 - mmcls - INFO - Saving checkpoint at 84 epochs
2024-03-04 00:18:11,426 - mmcls - INFO - Epoch(val) [84][6]	accuracy_top-1: 89.4118, accuracy_top-5: 100.0000
2024-03-04 00:18:22,643 - mmcls - INFO - Saving checkpoint at 85 epochs
2024-03-04 00:18:25,099 - mmcls - INFO - Epoch(val) [85][6]	accuracy_top-1: 95.2941, accuracy_top-5: 99.4118
2024-03-04 00:18:35,694 - mmcls - INFO - Saving checkpoint at 86 epochs
2024-03-04 00:18:38,405 - mmcls - INFO - Epoch(val) [86][6]	accuracy_top-1: 92.3529, accuracy_top-5: 100.0000
2024-03-04 00:18:49,033 - mmcls - INFO - Saving checkpoint at 87 epochs
2024-03-04 00:18:51,426 - mmcls - INFO - Epoch(val) [87][6]	accuracy_top-1: 93.5294, accuracy_top-5: 100.0000
2024-03-04 00:19:01,940 - mmcls - INFO - Saving checkpoint at 88 epochs
2024-03-04 00:19:04,332 - mmcls - INFO - Epoch(val) [88][6]	accuracy_top-1: 94.1176, accuracy_top-5: 99.4118
2024-03-04 00:19:15,047 - mmcls - INFO - Saving checkpoint at 89 epochs
2024-03-04 00:19:17,834 - mmcls - INFO - Epoch(val) [89][6]	accuracy_top-1: 94.1176, accuracy_top-5: 100.0000
2024-03-04 00:19:28,681 - mmcls - INFO - Saving checkpoint at 90 epochs
2024-03-04 00:19:31,086 - mmcls - INFO - Epoch(val) [90][6]	accuracy_top-1: 91.1765, accuracy_top-5: 99.4118
2024-03-04 00:19:42,081 - mmcls - INFO - Saving checkpoint at 91 epochs
2024-03-04 00:19:44,877 - mmcls - INFO - Epoch(val) [91][6]	accuracy_top-1: 93.5294, accuracy_top-5: 100.0000
2024-03-04 00:19:55,671 - mmcls - INFO - Saving checkpoint at 92 epochs
2024-03-04 00:19:57,967 - mmcls - INFO - Epoch(val) [92][6]	accuracy_top-1: 96.4706, accuracy_top-5: 100.0000
2024-03-04 00:20:09,038 - mmcls - INFO - Saving checkpoint at 93 epochs
2024-03-04 00:20:11,504 - mmcls - INFO - Epoch(val) [93][6]	accuracy_top-1: 97.0588, accuracy_top-5: 100.0000
2024-03-04 00:20:22,005 - mmcls - INFO - Saving checkpoint at 94 epochs
2024-03-04 00:20:24,566 - mmcls - INFO - Epoch(val) [94][6]	accuracy_top-1: 94.7059, accuracy_top-5: 99.4118
2024-03-04 00:20:35,512 - mmcls - INFO - Saving checkpoint at 95 epochs
2024-03-04 00:20:37,876 - mmcls - INFO - Epoch(val) [95][6]	accuracy_top-1: 89.4118, accuracy_top-5: 100.0000
2024-03-04 00:20:48,783 - mmcls - INFO - Saving checkpoint at 96 epochs
2024-03-04 00:20:51,200 - mmcls - INFO - Epoch(val) [96][6]	accuracy_top-1: 94.7059, accuracy_top-5: 100.0000
2024-03-04 00:21:01,957 - mmcls - INFO - Saving checkpoint at 97 epochs
2024-03-04 00:21:04,546 - mmcls - INFO - Epoch(val) [97][6]	accuracy_top-1: 95.2941, accuracy_top-5: 99.4118
2024-03-04 00:21:15,295 - mmcls - INFO - Saving checkpoint at 98 epochs
2024-03-04 00:21:17,733 - mmcls - INFO - Epoch(val) [98][6]	accuracy_top-1: 94.7059, accuracy_top-5: 99.4118
2024-03-04 00:21:28,631 - mmcls - INFO - Saving checkpoint at 99 epochs
2024-03-04 00:21:30,975 - mmcls - INFO - Epoch(val) [99][6]	accuracy_top-1: 96.4706, accuracy_top-5: 100.0000
2024-03-04 00:21:42,166 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-03-04 00:21:44,673 - mmcls - INFO - Epoch(val) [100][6]	accuracy_top-1: 94.1176, accuracy_top-5: 99.4118
