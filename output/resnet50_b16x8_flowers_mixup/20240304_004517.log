2024-03-04 00:45:17,838 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: GCC 11.4
MMCV CUDA Compiler: 11.8
MMClassification: 0.15.0+2d2583a
------------------------------------------------------------

2024-03-04 00:45:17,838 - mmcls - INFO - Distributed training: False
2024-03-04 00:45:18,010 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='MultiLabelLinearClsHead',
        num_classes=17,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0, use_soft=True)),
    train_cfg=dict(
        augments=dict(type='BatchMixup', alpha=1.0, num_classes=17, prob=1.0)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=100)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/resnet50_b16x8_flowers_mixup'
gpu_ids = range(0, 1)

2024-03-04 00:45:18,264 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2024-03-04 00:45:18,558 - mmcls - INFO - initialize MultiLabelLinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([17, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([17]): 
NormalInit: mean=0, std=0.01, bias=0 
2024-03-04 00:45:21,924 - mmcls - INFO - Start running, host: hzhao11@gpu2-comp-101, work_dir: /userhome/cs2/hzhao11/training/oxford-cnn/output/resnet50_b16x8_flowers_mixup
2024-03-04 00:45:21,925 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-03-04 00:45:21,925 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2024-03-04 00:45:21,925 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/hzhao11/training/oxford-cnn/output/resnet50_b16x8_flowers_mixup by HardDiskBackend.
2024-03-04 00:45:33,673 - mmcls - INFO - Saving checkpoint at 1 epochs
2024-03-04 00:45:36,190 - mmcls - INFO - Epoch(val) [1][6]	accuracy_top-1: 8.8235, accuracy_top-5: 35.8824
2024-03-04 00:45:46,711 - mmcls - INFO - Saving checkpoint at 2 epochs
2024-03-04 00:45:49,186 - mmcls - INFO - Epoch(val) [2][6]	accuracy_top-1: 14.7059, accuracy_top-5: 67.6471
2024-03-04 00:45:59,759 - mmcls - INFO - Saving checkpoint at 3 epochs
2024-03-04 00:46:02,258 - mmcls - INFO - Epoch(val) [3][6]	accuracy_top-1: 21.1765, accuracy_top-5: 70.0000
2024-03-04 00:46:13,082 - mmcls - INFO - Saving checkpoint at 4 epochs
2024-03-04 00:46:15,956 - mmcls - INFO - Epoch(val) [4][6]	accuracy_top-1: 19.4118, accuracy_top-5: 72.3529
2024-03-04 00:46:26,640 - mmcls - INFO - Saving checkpoint at 5 epochs
2024-03-04 00:46:29,168 - mmcls - INFO - Epoch(val) [5][6]	accuracy_top-1: 31.1765, accuracy_top-5: 81.1765
2024-03-04 00:46:40,072 - mmcls - INFO - Saving checkpoint at 6 epochs
2024-03-04 00:46:42,725 - mmcls - INFO - Epoch(val) [6][6]	accuracy_top-1: 32.3529, accuracy_top-5: 82.9412
2024-03-04 00:46:53,918 - mmcls - INFO - Saving checkpoint at 7 epochs
2024-03-04 00:46:56,324 - mmcls - INFO - Epoch(val) [7][6]	accuracy_top-1: 37.6471, accuracy_top-5: 86.4706
2024-03-04 00:47:07,947 - mmcls - INFO - Saving checkpoint at 8 epochs
2024-03-04 00:47:10,568 - mmcls - INFO - Epoch(val) [8][6]	accuracy_top-1: 37.0588, accuracy_top-5: 79.4118
2024-03-04 00:47:21,480 - mmcls - INFO - Saving checkpoint at 9 epochs
2024-03-04 00:47:23,976 - mmcls - INFO - Epoch(val) [9][6]	accuracy_top-1: 34.7059, accuracy_top-5: 84.1176
2024-03-04 00:47:35,030 - mmcls - INFO - Saving checkpoint at 10 epochs
2024-03-04 00:47:37,524 - mmcls - INFO - Epoch(val) [10][6]	accuracy_top-1: 41.7647, accuracy_top-5: 90.0000
2024-03-04 00:47:48,719 - mmcls - INFO - Saving checkpoint at 11 epochs
2024-03-04 00:47:51,175 - mmcls - INFO - Epoch(val) [11][6]	accuracy_top-1: 42.3529, accuracy_top-5: 85.8824
2024-03-04 00:48:02,893 - mmcls - INFO - Saving checkpoint at 12 epochs
2024-03-04 00:48:05,418 - mmcls - INFO - Epoch(val) [12][6]	accuracy_top-1: 42.3529, accuracy_top-5: 90.5882
2024-03-04 00:48:16,705 - mmcls - INFO - Saving checkpoint at 13 epochs
2024-03-04 00:48:19,225 - mmcls - INFO - Epoch(val) [13][6]	accuracy_top-1: 44.1176, accuracy_top-5: 88.8235
2024-03-04 00:48:30,451 - mmcls - INFO - Saving checkpoint at 14 epochs
2024-03-04 00:48:33,307 - mmcls - INFO - Epoch(val) [14][6]	accuracy_top-1: 48.2353, accuracy_top-5: 91.7647
2024-03-04 00:48:44,562 - mmcls - INFO - Saving checkpoint at 15 epochs
2024-03-04 00:48:46,951 - mmcls - INFO - Epoch(val) [15][6]	accuracy_top-1: 54.1176, accuracy_top-5: 93.5294
2024-03-04 00:48:58,181 - mmcls - INFO - Saving checkpoint at 16 epochs
2024-03-04 00:49:01,272 - mmcls - INFO - Epoch(val) [16][6]	accuracy_top-1: 44.1176, accuracy_top-5: 88.2353
2024-03-04 00:49:12,190 - mmcls - INFO - Saving checkpoint at 17 epochs
2024-03-04 00:49:15,017 - mmcls - INFO - Epoch(val) [17][6]	accuracy_top-1: 44.7059, accuracy_top-5: 86.4706
2024-03-04 00:49:26,348 - mmcls - INFO - Saving checkpoint at 18 epochs
2024-03-04 00:49:28,895 - mmcls - INFO - Epoch(val) [18][6]	accuracy_top-1: 45.8824, accuracy_top-5: 87.6471
2024-03-04 00:49:40,371 - mmcls - INFO - Saving checkpoint at 19 epochs
2024-03-04 00:49:43,081 - mmcls - INFO - Epoch(val) [19][6]	accuracy_top-1: 52.3529, accuracy_top-5: 94.7059
2024-03-04 00:49:54,519 - mmcls - INFO - Saving checkpoint at 20 epochs
2024-03-04 00:49:57,073 - mmcls - INFO - Epoch(val) [20][6]	accuracy_top-1: 55.8824, accuracy_top-5: 94.1176
2024-03-04 00:50:08,621 - mmcls - INFO - Saving checkpoint at 21 epochs
2024-03-04 00:50:11,137 - mmcls - INFO - Epoch(val) [21][6]	accuracy_top-1: 65.2941, accuracy_top-5: 95.2941
2024-03-04 00:50:22,516 - mmcls - INFO - Saving checkpoint at 22 epochs
2024-03-04 00:50:24,986 - mmcls - INFO - Epoch(val) [22][6]	accuracy_top-1: 55.8824, accuracy_top-5: 94.7059
2024-03-04 00:50:36,302 - mmcls - INFO - Saving checkpoint at 23 epochs
2024-03-04 00:50:38,904 - mmcls - INFO - Epoch(val) [23][6]	accuracy_top-1: 62.9412, accuracy_top-5: 97.6471
2024-03-04 00:50:50,215 - mmcls - INFO - Saving checkpoint at 24 epochs
2024-03-04 00:50:52,727 - mmcls - INFO - Epoch(val) [24][6]	accuracy_top-1: 60.5882, accuracy_top-5: 94.7059
2024-03-04 00:51:04,350 - mmcls - INFO - Saving checkpoint at 25 epochs
2024-03-04 00:51:06,789 - mmcls - INFO - Epoch(val) [25][6]	accuracy_top-1: 60.0000, accuracy_top-5: 95.2941
2024-03-04 00:51:18,231 - mmcls - INFO - Saving checkpoint at 26 epochs
2024-03-04 00:51:20,655 - mmcls - INFO - Epoch(val) [26][6]	accuracy_top-1: 66.4706, accuracy_top-5: 94.1176
2024-03-04 00:51:31,904 - mmcls - INFO - Saving checkpoint at 27 epochs
2024-03-04 00:51:34,451 - mmcls - INFO - Epoch(val) [27][6]	accuracy_top-1: 68.8235, accuracy_top-5: 94.1176
2024-03-04 00:51:46,036 - mmcls - INFO - Saving checkpoint at 28 epochs
2024-03-04 00:51:48,600 - mmcls - INFO - Epoch(val) [28][6]	accuracy_top-1: 66.4706, accuracy_top-5: 95.2941
2024-03-04 00:52:00,171 - mmcls - INFO - Saving checkpoint at 29 epochs
2024-03-04 00:52:02,930 - mmcls - INFO - Epoch(val) [29][6]	accuracy_top-1: 62.9412, accuracy_top-5: 95.8824
2024-03-04 00:52:14,149 - mmcls - INFO - Saving checkpoint at 30 epochs
2024-03-04 00:52:16,762 - mmcls - INFO - Epoch(val) [30][6]	accuracy_top-1: 66.4706, accuracy_top-5: 91.1765
2024-03-04 00:52:28,270 - mmcls - INFO - Saving checkpoint at 31 epochs
2024-03-04 00:52:30,832 - mmcls - INFO - Epoch(val) [31][6]	accuracy_top-1: 62.9412, accuracy_top-5: 91.7647
2024-03-04 00:52:42,849 - mmcls - INFO - Saving checkpoint at 32 epochs
2024-03-04 00:52:45,408 - mmcls - INFO - Epoch(val) [32][6]	accuracy_top-1: 69.4118, accuracy_top-5: 94.7059
2024-03-04 00:52:56,951 - mmcls - INFO - Saving checkpoint at 33 epochs
2024-03-04 00:52:59,396 - mmcls - INFO - Epoch(val) [33][6]	accuracy_top-1: 70.5882, accuracy_top-5: 93.5294
2024-03-04 00:53:10,597 - mmcls - INFO - Saving checkpoint at 34 epochs
2024-03-04 00:53:12,979 - mmcls - INFO - Epoch(val) [34][6]	accuracy_top-1: 65.2941, accuracy_top-5: 95.8824
2024-03-04 00:53:24,546 - mmcls - INFO - Saving checkpoint at 35 epochs
2024-03-04 00:53:27,042 - mmcls - INFO - Epoch(val) [35][6]	accuracy_top-1: 75.2941, accuracy_top-5: 98.2353
2024-03-04 00:53:38,655 - mmcls - INFO - Saving checkpoint at 36 epochs
2024-03-04 00:53:41,394 - mmcls - INFO - Epoch(val) [36][6]	accuracy_top-1: 77.0588, accuracy_top-5: 96.4706
2024-03-04 00:53:52,655 - mmcls - INFO - Saving checkpoint at 37 epochs
2024-03-04 00:53:55,378 - mmcls - INFO - Epoch(val) [37][6]	accuracy_top-1: 71.7647, accuracy_top-5: 97.6471
2024-03-04 00:54:06,623 - mmcls - INFO - Saving checkpoint at 38 epochs
2024-03-04 00:54:09,297 - mmcls - INFO - Epoch(val) [38][6]	accuracy_top-1: 75.8824, accuracy_top-5: 98.2353
2024-03-04 00:54:20,673 - mmcls - INFO - Saving checkpoint at 39 epochs
2024-03-04 00:54:23,466 - mmcls - INFO - Epoch(val) [39][6]	accuracy_top-1: 68.2353, accuracy_top-5: 96.4706
2024-03-04 00:54:34,706 - mmcls - INFO - Saving checkpoint at 40 epochs
2024-03-04 00:54:37,164 - mmcls - INFO - Epoch(val) [40][6]	accuracy_top-1: 68.8235, accuracy_top-5: 95.2941
2024-03-04 00:54:48,215 - mmcls - INFO - Saving checkpoint at 41 epochs
2024-03-04 00:54:50,706 - mmcls - INFO - Epoch(val) [41][6]	accuracy_top-1: 71.1765, accuracy_top-5: 97.6471
2024-03-04 00:55:01,967 - mmcls - INFO - Saving checkpoint at 42 epochs
2024-03-04 00:55:04,656 - mmcls - INFO - Epoch(val) [42][6]	accuracy_top-1: 73.5294, accuracy_top-5: 97.6471
2024-03-04 00:55:15,851 - mmcls - INFO - Saving checkpoint at 43 epochs
2024-03-04 00:55:18,321 - mmcls - INFO - Epoch(val) [43][6]	accuracy_top-1: 73.5294, accuracy_top-5: 97.0588
2024-03-04 00:55:29,513 - mmcls - INFO - Saving checkpoint at 44 epochs
2024-03-04 00:55:32,112 - mmcls - INFO - Epoch(val) [44][6]	accuracy_top-1: 70.5882, accuracy_top-5: 94.7059
2024-03-04 00:55:43,558 - mmcls - INFO - Saving checkpoint at 45 epochs
2024-03-04 00:55:45,893 - mmcls - INFO - Epoch(val) [45][6]	accuracy_top-1: 78.8235, accuracy_top-5: 96.4706
2024-03-04 00:55:57,165 - mmcls - INFO - Saving checkpoint at 46 epochs
2024-03-04 00:55:59,940 - mmcls - INFO - Epoch(val) [46][6]	accuracy_top-1: 71.1765, accuracy_top-5: 97.0588
2024-03-04 00:56:11,134 - mmcls - INFO - Saving checkpoint at 47 epochs
2024-03-04 00:56:13,650 - mmcls - INFO - Epoch(val) [47][6]	accuracy_top-1: 72.9412, accuracy_top-5: 96.4706
2024-03-04 00:56:25,005 - mmcls - INFO - Saving checkpoint at 48 epochs
2024-03-04 00:56:27,576 - mmcls - INFO - Epoch(val) [48][6]	accuracy_top-1: 82.3529, accuracy_top-5: 99.4118
2024-03-04 00:56:38,805 - mmcls - INFO - Saving checkpoint at 49 epochs
2024-03-04 00:56:41,418 - mmcls - INFO - Epoch(val) [49][6]	accuracy_top-1: 78.2353, accuracy_top-5: 97.0588
2024-03-04 00:56:52,557 - mmcls - INFO - Saving checkpoint at 50 epochs
2024-03-04 00:56:55,078 - mmcls - INFO - Epoch(val) [50][6]	accuracy_top-1: 79.4118, accuracy_top-5: 98.2353
2024-03-04 00:57:06,220 - mmcls - INFO - Saving checkpoint at 51 epochs
2024-03-04 00:57:08,787 - mmcls - INFO - Epoch(val) [51][6]	accuracy_top-1: 75.8824, accuracy_top-5: 96.4706
2024-03-04 00:57:20,183 - mmcls - INFO - Saving checkpoint at 52 epochs
2024-03-04 00:57:22,685 - mmcls - INFO - Epoch(val) [52][6]	accuracy_top-1: 78.2353, accuracy_top-5: 96.4706
2024-03-04 00:57:34,682 - mmcls - INFO - Saving checkpoint at 53 epochs
2024-03-04 00:57:37,263 - mmcls - INFO - Epoch(val) [53][6]	accuracy_top-1: 80.0000, accuracy_top-5: 99.4118
2024-03-04 00:57:48,410 - mmcls - INFO - Saving checkpoint at 54 epochs
2024-03-04 00:57:51,113 - mmcls - INFO - Epoch(val) [54][6]	accuracy_top-1: 73.5294, accuracy_top-5: 97.6471
2024-03-04 00:58:02,235 - mmcls - INFO - Saving checkpoint at 55 epochs
2024-03-04 00:58:04,754 - mmcls - INFO - Epoch(val) [55][6]	accuracy_top-1: 79.4118, accuracy_top-5: 98.2353
2024-03-04 00:58:16,138 - mmcls - INFO - Saving checkpoint at 56 epochs
2024-03-04 00:58:18,634 - mmcls - INFO - Epoch(val) [56][6]	accuracy_top-1: 77.6471, accuracy_top-5: 97.6471
2024-03-04 00:58:30,231 - mmcls - INFO - Saving checkpoint at 57 epochs
2024-03-04 00:58:32,664 - mmcls - INFO - Epoch(val) [57][6]	accuracy_top-1: 86.4706, accuracy_top-5: 97.6471
2024-03-04 00:58:44,115 - mmcls - INFO - Saving checkpoint at 58 epochs
2024-03-04 00:58:46,545 - mmcls - INFO - Epoch(val) [58][6]	accuracy_top-1: 80.5882, accuracy_top-5: 97.0588
2024-03-04 00:58:57,839 - mmcls - INFO - Saving checkpoint at 59 epochs
2024-03-04 00:59:00,420 - mmcls - INFO - Epoch(val) [59][6]	accuracy_top-1: 82.9412, accuracy_top-5: 98.8235
2024-03-04 00:59:11,556 - mmcls - INFO - Saving checkpoint at 60 epochs
2024-03-04 00:59:14,058 - mmcls - INFO - Epoch(val) [60][6]	accuracy_top-1: 68.8235, accuracy_top-5: 95.8824
2024-03-04 00:59:25,346 - mmcls - INFO - Saving checkpoint at 61 epochs
2024-03-04 00:59:28,044 - mmcls - INFO - Epoch(val) [61][6]	accuracy_top-1: 85.2941, accuracy_top-5: 97.0588
2024-03-04 00:59:39,295 - mmcls - INFO - Saving checkpoint at 62 epochs
2024-03-04 00:59:42,043 - mmcls - INFO - Epoch(val) [62][6]	accuracy_top-1: 80.5882, accuracy_top-5: 96.4706
2024-03-04 00:59:53,535 - mmcls - INFO - Saving checkpoint at 63 epochs
2024-03-04 00:59:56,138 - mmcls - INFO - Epoch(val) [63][6]	accuracy_top-1: 78.8235, accuracy_top-5: 96.4706
2024-03-04 01:00:07,954 - mmcls - INFO - Saving checkpoint at 64 epochs
2024-03-04 01:00:10,639 - mmcls - INFO - Epoch(val) [64][6]	accuracy_top-1: 72.9412, accuracy_top-5: 97.6471
2024-03-04 01:00:21,720 - mmcls - INFO - Saving checkpoint at 65 epochs
2024-03-04 01:00:24,089 - mmcls - INFO - Epoch(val) [65][6]	accuracy_top-1: 66.4706, accuracy_top-5: 95.8824
2024-03-04 01:00:35,297 - mmcls - INFO - Saving checkpoint at 66 epochs
2024-03-04 01:00:37,818 - mmcls - INFO - Epoch(val) [66][6]	accuracy_top-1: 86.4706, accuracy_top-5: 98.8235
2024-03-04 01:00:48,806 - mmcls - INFO - Saving checkpoint at 67 epochs
2024-03-04 01:00:51,417 - mmcls - INFO - Epoch(val) [67][6]	accuracy_top-1: 75.8824, accuracy_top-5: 97.6471
2024-03-04 01:01:03,081 - mmcls - INFO - Saving checkpoint at 68 epochs
2024-03-04 01:01:05,783 - mmcls - INFO - Epoch(val) [68][6]	accuracy_top-1: 85.2941, accuracy_top-5: 98.2353
2024-03-04 01:01:17,322 - mmcls - INFO - Saving checkpoint at 69 epochs
2024-03-04 01:01:19,829 - mmcls - INFO - Epoch(val) [69][6]	accuracy_top-1: 73.5294, accuracy_top-5: 98.8235
2024-03-04 01:01:30,963 - mmcls - INFO - Saving checkpoint at 70 epochs
2024-03-04 01:01:33,844 - mmcls - INFO - Epoch(val) [70][6]	accuracy_top-1: 77.0588, accuracy_top-5: 99.4118
2024-03-04 01:01:45,051 - mmcls - INFO - Saving checkpoint at 71 epochs
2024-03-04 01:01:48,075 - mmcls - INFO - Epoch(val) [71][6]	accuracy_top-1: 78.8235, accuracy_top-5: 97.6471
2024-03-04 01:01:59,519 - mmcls - INFO - Saving checkpoint at 72 epochs
2024-03-04 01:02:02,118 - mmcls - INFO - Epoch(val) [72][6]	accuracy_top-1: 78.8235, accuracy_top-5: 99.4118
2024-03-04 01:02:13,237 - mmcls - INFO - Saving checkpoint at 73 epochs
2024-03-04 01:02:15,726 - mmcls - INFO - Epoch(val) [73][6]	accuracy_top-1: 85.8824, accuracy_top-5: 98.8235
2024-03-04 01:02:27,037 - mmcls - INFO - Saving checkpoint at 74 epochs
2024-03-04 01:02:29,850 - mmcls - INFO - Epoch(val) [74][6]	accuracy_top-1: 79.4118, accuracy_top-5: 99.4118
2024-03-04 01:02:41,017 - mmcls - INFO - Saving checkpoint at 75 epochs
2024-03-04 01:02:43,908 - mmcls - INFO - Epoch(val) [75][6]	accuracy_top-1: 82.9412, accuracy_top-5: 98.8235
2024-03-04 01:02:55,201 - mmcls - INFO - Saving checkpoint at 76 epochs
2024-03-04 01:02:57,688 - mmcls - INFO - Epoch(val) [76][6]	accuracy_top-1: 81.7647, accuracy_top-5: 98.8235
2024-03-04 01:03:09,121 - mmcls - INFO - Saving checkpoint at 77 epochs
2024-03-04 01:03:11,767 - mmcls - INFO - Epoch(val) [77][6]	accuracy_top-1: 80.0000, accuracy_top-5: 97.0588
2024-03-04 01:03:23,336 - mmcls - INFO - Saving checkpoint at 78 epochs
2024-03-04 01:03:26,238 - mmcls - INFO - Epoch(val) [78][6]	accuracy_top-1: 78.2353, accuracy_top-5: 99.4118
2024-03-04 01:03:37,587 - mmcls - INFO - Saving checkpoint at 79 epochs
2024-03-04 01:03:40,189 - mmcls - INFO - Epoch(val) [79][6]	accuracy_top-1: 86.4706, accuracy_top-5: 98.2353
2024-03-04 01:03:51,828 - mmcls - INFO - Saving checkpoint at 80 epochs
2024-03-04 01:03:54,170 - mmcls - INFO - Epoch(val) [80][6]	accuracy_top-1: 80.5882, accuracy_top-5: 98.8235
2024-03-04 01:04:05,904 - mmcls - INFO - Saving checkpoint at 81 epochs
2024-03-04 01:04:08,823 - mmcls - INFO - Epoch(val) [81][6]	accuracy_top-1: 85.8824, accuracy_top-5: 99.4118
2024-03-04 01:04:20,478 - mmcls - INFO - Saving checkpoint at 82 epochs
2024-03-04 01:04:23,017 - mmcls - INFO - Epoch(val) [82][6]	accuracy_top-1: 84.1176, accuracy_top-5: 98.2353
2024-03-04 01:04:34,262 - mmcls - INFO - Saving checkpoint at 83 epochs
2024-03-04 01:04:36,874 - mmcls - INFO - Epoch(val) [83][6]	accuracy_top-1: 87.0588, accuracy_top-5: 99.4118
2024-03-04 01:04:48,253 - mmcls - INFO - Saving checkpoint at 84 epochs
2024-03-04 01:04:50,848 - mmcls - INFO - Epoch(val) [84][6]	accuracy_top-1: 85.2941, accuracy_top-5: 99.4118
2024-03-04 01:05:02,033 - mmcls - INFO - Saving checkpoint at 85 epochs
2024-03-04 01:05:04,540 - mmcls - INFO - Epoch(val) [85][6]	accuracy_top-1: 82.3529, accuracy_top-5: 97.6471
2024-03-04 01:05:15,755 - mmcls - INFO - Saving checkpoint at 86 epochs
2024-03-04 01:05:18,435 - mmcls - INFO - Epoch(val) [86][6]	accuracy_top-1: 88.2353, accuracy_top-5: 99.4118
2024-03-04 01:05:29,622 - mmcls - INFO - Saving checkpoint at 87 epochs
2024-03-04 01:05:32,327 - mmcls - INFO - Epoch(val) [87][6]	accuracy_top-1: 88.2353, accuracy_top-5: 98.2353
2024-03-04 01:05:43,552 - mmcls - INFO - Saving checkpoint at 88 epochs
2024-03-04 01:05:46,069 - mmcls - INFO - Epoch(val) [88][6]	accuracy_top-1: 84.7059, accuracy_top-5: 98.2353
2024-03-04 01:05:57,440 - mmcls - INFO - Saving checkpoint at 89 epochs
2024-03-04 01:05:59,961 - mmcls - INFO - Epoch(val) [89][6]	accuracy_top-1: 87.0588, accuracy_top-5: 98.8235
2024-03-04 01:06:11,486 - mmcls - INFO - Saving checkpoint at 90 epochs
2024-03-04 01:06:14,198 - mmcls - INFO - Epoch(val) [90][6]	accuracy_top-1: 82.3529, accuracy_top-5: 100.0000
2024-03-04 01:06:25,712 - mmcls - INFO - Saving checkpoint at 91 epochs
2024-03-04 01:06:28,390 - mmcls - INFO - Epoch(val) [91][6]	accuracy_top-1: 84.7059, accuracy_top-5: 99.4118
2024-03-04 01:06:39,707 - mmcls - INFO - Saving checkpoint at 92 epochs
2024-03-04 01:06:42,296 - mmcls - INFO - Epoch(val) [92][6]	accuracy_top-1: 84.1176, accuracy_top-5: 99.4118
2024-03-04 01:06:53,435 - mmcls - INFO - Saving checkpoint at 93 epochs
2024-03-04 01:06:55,967 - mmcls - INFO - Epoch(val) [93][6]	accuracy_top-1: 88.2353, accuracy_top-5: 98.8235
2024-03-04 01:07:07,382 - mmcls - INFO - Saving checkpoint at 94 epochs
2024-03-04 01:07:09,865 - mmcls - INFO - Epoch(val) [94][6]	accuracy_top-1: 83.5294, accuracy_top-5: 99.4118
2024-03-04 01:07:21,067 - mmcls - INFO - Saving checkpoint at 95 epochs
2024-03-04 01:07:23,656 - mmcls - INFO - Epoch(val) [95][6]	accuracy_top-1: 84.7059, accuracy_top-5: 99.4118
2024-03-04 01:07:34,814 - mmcls - INFO - Saving checkpoint at 96 epochs
2024-03-04 01:07:37,175 - mmcls - INFO - Epoch(val) [96][6]	accuracy_top-1: 86.4706, accuracy_top-5: 98.8235
2024-03-04 01:07:48,373 - mmcls - INFO - Saving checkpoint at 97 epochs
2024-03-04 01:07:51,416 - mmcls - INFO - Epoch(val) [97][6]	accuracy_top-1: 80.0000, accuracy_top-5: 98.8235
2024-03-04 01:08:02,604 - mmcls - INFO - Saving checkpoint at 98 epochs
2024-03-04 01:08:05,157 - mmcls - INFO - Epoch(val) [98][6]	accuracy_top-1: 91.1765, accuracy_top-5: 99.4118
2024-03-04 01:08:16,343 - mmcls - INFO - Saving checkpoint at 99 epochs
2024-03-04 01:08:19,023 - mmcls - INFO - Epoch(val) [99][6]	accuracy_top-1: 87.6471, accuracy_top-5: 98.8235
2024-03-04 01:08:30,562 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-03-04 01:08:33,141 - mmcls - INFO - Epoch(val) [100][6]	accuracy_top-1: 82.9412, accuracy_top-5: 99.4118
